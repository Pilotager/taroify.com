{"version":3,"sources":["webpack:///../../../../packages/icons/src/utils/index.ts","webpack:///./src/components/block.tsx","webpack:///../../../../packages/icons/src/ArrowRight.tsx","webpack:///../../../../packages/core/src/cell/cell-group.context.ts","webpack:///../../../../packages/core/src/cell/cell-base.tsx","webpack:///../../../../packages/core/src/cell/cell-brief.tsx","webpack:///../../../../packages/core/src/cell/cell-title.tsx","webpack:///../../../../packages/core/src/cell/cell-value.tsx","webpack:///../../../../packages/core/src/cell/cell.tsx","webpack:///../../../../packages/core/src/cell/cell-group.tsx","webpack:///../../../../packages/core/src/cell/index.ts","webpack:///../../../../packages/core/src/cell/style/index.ts","webpack:///./src/pages/basic/style/index.tsx"],"names":["isValidElement","element","isIconElement","cloneElement","node","className","oldProps","props","newProps","classNames","Block","variant","title","children","demoPrefixClassname","ArrowRight","createVanIconComponent","createContext","CellBase","size","clickable","clickableProp","required","bordered","useContext","prefixClassname","align","icon","cloneIconElement","rightIcon","CellBrief","CellTitle","CellValue","alone","inset","CellGroupContext","value","Cell","brief","TransitionDemo","useState","TransitionName","Fade","name","setName","state","setState","toggleTransition","newName","onClick","SlideUp","SlideDown","SlideLeft","SlideRight","in","onEntered"],"mappings":"u6CAKM,0BAEJ,IAAKA,yBAAL,GACE,SAEF,IAAMC,EAAN,EACA,OAAO,IAAQA,EAAR,KAAP,KAGI,+BACJ,IAAKC,cAAL,GACE,OAAO,4BAAuBC,uBAAaC,EAApC,GAAP,EAEI,IAAEC,EAAR,EAAQA,UAAR,gCACMJ,EAAN,EACeK,EAAf,EAAQC,MACFC,EAAQ,sCAEZH,YAAWI,IAAWH,EAAD,cAFvB,GAKA,OAAOH,uBAAaF,EAApB,K,kJCVa,SAASS,MAAMH,GAAmB,MACvCF,EAAwCE,EAAxCF,UAAWM,EAA6BJ,EAA7BI,QAASC,EAAoBL,EAApBK,MAAOC,EAAaN,EAAbM,SACnC,OACE,eAAC,IAAD,CAAMR,YAAWI,IAAWK,YAAoB,SAAUT,GAA1D,YACGO,GAAS,cAAC,IAAD,CAAMP,YAAWS,YAAoB,gBAAiBD,WAAUD,IAC1E,cAAC,IAAD,CACEP,YAAWI,KAAU,mBAClBK,YAAoB,kBAAgC,SAAZH,GADtB,cAElBG,YAAoB,eAA6B,SAAZH,GAFnB,IADvB,WAMGE,S,2DC3BT,aAEME,EAAaC,YAAnB,SACA,O,yMCKA,EAFyBC,wBAAzB,I,03BC2DA,MA5CA,SAASC,SAASX,GAAoB,MAC9B,EAAN,EAAM,UAAN,IAEEY,YAFF,MAAM,SAAN,EAAM,EAAN,EAAM,MAAN,IAIEC,UAAWC,OAJb,aAKEC,gBALF,aAMEC,gBANF,SAAM,EAAN,EAAM,OAAN,EAAM,UASJV,EATF,EASEA,SATF,gCAaQO,EAAcI,qBAAtB,GAAQJ,UAER,OACE,oB,uYAAA,EACEf,YAAWI,IACTgB,YADmB,4BAGhBA,YAAD,eADF,UACoCC,GAHjB,cAIhBD,YAAD,gBAFF,WAEqCC,GAJlB,cAKhBD,YAAD,aAHF,QAGkCC,GALf,cAMhBD,YAAD,eAJF,UAIoCN,GANjB,cAOhBM,YAAD,mBAAsCJ,GALxC,GAFmB,cAQhBI,YAAD,kBANF,GAFmB,cAShBA,YAAD,qBAAwCF,GATvB,OADvB,GAgBGI,GAAQzB,YAARyB,GACGC,YAAiBD,EAAM,CAAEtB,YAAWoB,YAAgB,gBAjB1D,IAoBGI,GAAa3B,YAAb2B,GACGD,YAAiBC,EAAW,CAAExB,YAAWoB,YAAgB,sBAtBjE,I,o1BCrBF,MALA,SAASK,UAAUvB,GACX,IAAEF,EAAR,EAAQA,UAAR,0CACA,OAAO,oB,ibAAA,EAAMA,YAAWI,IAAWgB,YAAD,mBAAlC,K,o1BCGF,MALA,SAASM,UAAUxB,GACX,IAAEF,EAAR,EAAQA,UAAR,0CACA,OAAO,oB,ibAAA,EAAMA,YAAWI,IAAWgB,YAAD,mBAAlC,K,41BCeF,MAhBA,SAASO,UAAUzB,GACjB,IAAM,EAAN,EAAM,UAAa0B,EAAnB,EAAmBA,MAAnB,0CACA,OACE,oB,ibAAA,EACE5B,YAAWI,IACTgB,YADmB,8BAGhBA,YAAD,sBAAyCQ,GAHxB,IAFzB,K,20BCsBF,I,03BCaA,MAjCM,sBACJ,IAAM,EAAN,EAAM,MAAN,IAAeb,iBAAf,aAAkCc,aAAlC,aAAiDX,gBAAjD,SAAkEV,EAAlE,EAAkEA,SAAlE,0CACA,OACE,gBAACsB,EAAD,SAA0B,CACxBC,QAAO,CACLhB,gBAGF,oB,ibAAA,EACEf,YAAWI,IAAWgB,YAAD,6BAClBA,YAAD,qBAAwCS,KAF5C,GAMGtB,GACC,oBAAK,CACHP,YAAWI,IAAWgB,YAAD,oCAClBA,YAAD,4BAA+CS,IAEjDrB,WAAUD,IAGd,oBAAK,CACHP,YAAWI,IAAWgB,YAAD,6BAClBA,YAAD,wBAA2CF,IAE7CV,WAAUA,OC3BdwB,EFMN,SAASA,KAAK9B,GACZ,IAAM,EAAN,EAAM,QAAN,EAAM,MAAgBM,EAAtB,EAAsBA,SAAtB,oCACA,OACE,kB,yZAAA,OACGD,GACC,yBAEG0B,GAAS,kBAAU,CAACzB,WAAUyB,KAGnC,kBAAU,CAACL,SAAD,EAAgBpB,WAAUA,MEf1CwB,UAEA,O,mCClBA,e,6QCWe,SAASE,iBACtB,MAAwBC,mBAAyBC,IAAeC,MAAhE,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BJ,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEA,SAASC,iBAAiBC,GACxBJ,EAAQI,GACRF,GAAUD,GAGZ,OACE,eAAC,IAAD,CAAMjC,QAAM,OAAOP,YAAU,aAA7B,YACE,eAAC,IAAD,CAAOM,UAAQ,OAAOC,QAAM,OAA5B,YACE,cAAC,IAAD,CAAMP,YAAWI,IAAW,mBAAoB,iBAAhD,0CAGA,cAAC,IAAD,CAAMJ,YAAWI,IAAW,uBAAwB,iBAApD,wFAIF,cAAC,IAAD,CAAOE,UAAQ,OAAOC,QAAM,SAA5B,WACE,cAAC,IAAD,CAAMP,YAAWI,IAAW,wBAAyB,qBAEvD,eAAC,IAAD,CAAOE,UAAQ,OAAOC,QAAM,KAA5B,YACE,mBACEQ,aAAS,EACTR,QAAM,OACNiB,YAAW,cAAC,IAAD,IACXoB,UAAS,0BAAMF,iBAAiBN,IAAeC,SAEjD,mBACEtB,aAAS,EACTR,QAAM,WACNiB,YAAW,cAAC,IAAD,IACXoB,UAAS,0BAAMF,iBAAiBN,IAAeS,YAEjD,mBACE9B,aAAS,EACTR,QAAM,aACNiB,YAAW,cAAC,IAAD,IACXoB,UAAS,0BAAMF,iBAAiBN,IAAeU,cAEjD,mBACE/B,aAAS,EACTR,QAAM,aACNiB,YAAW,cAAC,IAAD,IACXoB,UAAS,0BAAMF,iBAAiBN,IAAeW,cAEjD,mBACEhC,aAAS,EACTR,QAAM,cACNiB,YAAW,cAAC,IAAD,IACXoB,UAAS,0BAAMF,iBAAiBN,IAAeY,eAEjD,mBAAYC,KAAIT,EAAOF,OAAMA,EAAMY,YAAW,4BAAMT,GAAS,IAA7D,WACE,cAAC,IAAD,CAAMzC,YAAU","file":"chunk/75.b157800e.js","sourcesContent":["import classNames from \"classnames\"\nimport * as _ from \"lodash\"\nimport { cloneElement, isValidElement, ReactElement, ReactNode } from \"react\"\nimport { ICON_TYPE, IconProps } from \"../shared\"\n\nexport function isIconElement(node?: ReactNode): boolean {\n  // Is`t not ReactElement\n  if (!isValidElement(node)) {\n    return false\n  }\n  const element = node as ReactElement\n  return _.hasIn(element.type, ICON_TYPE)\n}\n\nexport function cloneIconElement(node: ReactNode, props: IconProps): ReactNode {\n  if (!isIconElement(node)) {\n    return isValidElement(node) ? cloneElement(node, props) : node\n  }\n  const { className, ...restProps } = props\n  const element = node as ReactElement\n  const { props: oldProps } = element\n  const newProps: IconProps = {\n    ...oldProps,\n    className: classNames(oldProps.className, className),\n    ...restProps,\n  }\n  return cloneElement(element, newProps)\n}\n","import { View } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { demoPrefixClassname } from \"../styles/prefix\"\r\nimport \"./block.scss\"\r\n\r\ntype BlockVariant = \"card\"\r\n\r\ninterface BlockProps {\r\n  className?: string\r\n  variant?: BlockVariant\r\n  title?: ReactNode\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function Block(props: BlockProps) {\r\n  const { className, variant, title, children } = props\r\n  return (\r\n    <View className={classNames(demoPrefixClassname(\"block\"), className)}>\r\n      {title && <View className={demoPrefixClassname(\"block__title\")} children={title} />}\r\n      <View\r\n        className={classNames({\r\n          [demoPrefixClassname(\"block__content\")]: variant !== \"card\",\r\n          [demoPrefixClassname(\"block__card\")]: variant === \"card\",\r\n        })}\r\n      >\r\n        {children}\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n","import { createVanIconComponent } from \"./van\"\r\n\r\nconst ArrowRight = createVanIconComponent(\"arrow\")\r\nexport default ArrowRight\r\n","import { createContext } from \"react\"\r\n\r\ninterface CellGroupContextValue {\r\n  clickable?: boolean\r\n}\r\n\r\nconst CellGroupContext = createContext<CellGroupContextValue>({})\r\n\r\nexport default CellGroupContext\r\n","import { cloneIconElement, isIconElement } from \"@taroify/icons/utils\"\r\nimport { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode, useContext } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport CellGroupContext from \"./cell-group.context\"\r\nimport { CellAlign, CellSize } from \"./cell.shared\"\r\n\r\nexport interface CellBaseProps extends ViewProps {\r\n  bordered?: boolean\r\n  required?: boolean\r\n  clickable?: boolean\r\n  size?: CellSize\r\n  align?: CellAlign\r\n  icon?: ReactNode\r\n  rightIcon?: ReactNode\r\n  children?: ReactNode\r\n}\r\n\r\nfunction CellBase(props: CellBaseProps) {\r\n  const {\r\n    className,\r\n    size = \"medium\",\r\n    align,\r\n    clickable: clickableProp = false,\r\n    required = false,\r\n    bordered = true,\r\n    icon,\r\n    rightIcon,\r\n    children,\r\n    ...restProps\r\n  } = props\r\n\r\n  const { clickable } = useContext(CellGroupContext)\r\n\r\n  return (\r\n    <View\r\n      className={classNames(\r\n        prefixClassname(\"cell\"),\r\n        {\r\n          [prefixClassname(\"cell--start\")]: align === \"start\",\r\n          [prefixClassname(\"cell--center\")]: align === \"center\",\r\n          [prefixClassname(\"cell--end\")]: align === \"end\",\r\n          [prefixClassname(\"cell--large\")]: size === \"large\",\r\n          [prefixClassname(\"cell--clickable\")]: clickableProp || clickable,\r\n          [prefixClassname(\"cell--required\")]: required,\r\n          [prefixClassname(\"cell--borderless\")]: !bordered,\r\n        },\r\n        className,\r\n      )}\r\n      {...restProps}\r\n    >\r\n      {icon && isIconElement(icon)\r\n        ? cloneIconElement(icon, { className: prefixClassname(\"cell__icon\") })\r\n        : icon}\r\n      {children}\r\n      {rightIcon && isIconElement(rightIcon)\r\n        ? cloneIconElement(rightIcon, { className: prefixClassname(\"cell__right-icon\") })\r\n        : rightIcon}\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default CellBase\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\ninterface CellBriefProps extends ViewProps {\r\n  children: ReactNode\r\n}\r\n\r\nfunction CellBrief(props: CellBriefProps) {\r\n  const { className, ...restProps } = props\r\n  return <View className={classNames(prefixClassname(\"cell__brief\"), className)} {...restProps} />\r\n}\r\n\r\nexport default CellBrief\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\ninterface CellTitleProps extends ViewProps {\r\n  children?: ReactNode\r\n}\r\n\r\nfunction CellTitle(props: CellTitleProps) {\r\n  const { className, ...restProps } = props\r\n  return <View className={classNames(prefixClassname(\"cell__title\"), className)} {...restProps} />\r\n}\r\n\r\nexport default CellTitle\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\ninterface CellValueProps extends ViewProps {\r\n  alone?: boolean\r\n  children: ReactNode\r\n}\r\n\r\nfunction CellValue(props: CellValueProps) {\r\n  const { className, alone, ...restProps } = props\r\n  return (\r\n    <View\r\n      className={classNames(\r\n        prefixClassname(\"cell__value\"),\r\n        {\r\n          [prefixClassname(\"cell__value--alone\")]: alone,\r\n        },\r\n        className,\r\n      )}\r\n      {...restProps}\r\n    />\r\n  )\r\n}\r\n\r\nexport default CellValue\r\n","import { ViewProps } from \"@tarojs/components/types/View\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport CellBase from \"./cell-base\"\r\nimport CellBrief from \"./cell-brief\"\r\nimport CellTitle from \"./cell-title\"\r\nimport CellValue from \"./cell-value\"\r\nimport { CellAlign, CellSize } from \"./cell.shared\"\r\n\r\nexport interface CellProps extends ViewProps {\r\n  size?: CellSize\r\n  align?: CellAlign\r\n  title?: ReactNode\r\n  brief?: ReactNode\r\n  icon?: ReactNode\r\n  rightIcon?: ReactNode\r\n  bordered?: boolean\r\n  clickable?: boolean\r\n  children?: ReactNode\r\n}\r\n\r\nfunction Cell(props: CellProps) {\r\n  const { title, brief, children, ...restProps } = props\r\n  return (\r\n    <CellBase {...restProps}>\r\n      {title && (\r\n        <CellTitle>\r\n          {title}\r\n          {brief && <CellBrief children={brief} />}\r\n        </CellTitle>\r\n      )}\r\n      <CellValue alone={!title} children={children} />\r\n    </CellBase>\r\n  )\r\n}\r\n\r\nexport default Cell\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport CellGroupContext from \"./cell-group.context\"\r\n\r\ninterface CellGroupProps extends ViewProps {\r\n  title?: ReactNode\r\n  clickable?: boolean\r\n  inset?: boolean\r\n  bordered?: boolean\r\n  children?: ReactNode\r\n}\r\n\r\nexport function CellGroup(props: CellGroupProps) {\r\n  const { title, clickable = false, inset = false, bordered = true, children, ...restProps } = props\r\n  return (\r\n    <CellGroupContext.Provider\r\n      value={{\r\n        clickable,\r\n      }}\r\n    >\r\n      <View\r\n        className={classNames(prefixClassname(\"cell-group\"), {\r\n          [prefixClassname(\"cell-group--inset\")]: inset,\r\n        })}\r\n        {...restProps}\r\n      >\r\n        {title && (\r\n          <View\r\n            className={classNames(prefixClassname(\"cell-group__title\"), {\r\n              [prefixClassname(\"cell-group__title--inset\")]: inset,\r\n            })}\r\n            children={title}\r\n          />\r\n        )}\r\n        <View\r\n          className={classNames(prefixClassname(\"cell-group\"), {\r\n            [prefixClassname(\"hairline--top-bottom\")]: bordered,\r\n          })}\r\n          children={children}\r\n        />\r\n      </View>\r\n    </CellGroupContext.Provider>\r\n  )\r\n}\r\n\r\nexport default CellGroup\r\n","import CellElement, { CellProps } from \"./cell\"\r\nimport CellGroup from \"./cell-group\"\r\n\r\nexport type { CellAlign, CellSize } from \"./cell.shared\"\r\nexport { default as CellBase } from \"./cell-base\"\r\nexport { default as CellTitle } from \"./cell-title\"\r\nexport { default as CellValue } from \"./cell-value\"\r\nexport type { CellProps } from \"./cell\"\r\n\r\ninterface CellInterface {\r\n  (props: CellProps): JSX.Element\r\n\r\n  Group: typeof CellGroup\r\n}\r\n\r\nconst Cell = CellElement as CellInterface\r\nCell.Group = CellGroup\r\n\r\nexport default Cell\r\n","import \"../../styles/style\"\r\nimport \"../index.scss\"\r\n","import { Cell, Transition } from \"@taroify/core\"\r\nimport { TransitionName } from \"@taroify/core/transition\"\r\nimport ArrowRight from \"@taroify/icons/ArrowRight\"\r\nimport { View } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { useState } from \"react\"\r\nimport Block from \"../../../components/block\"\r\nimport Page from \"../../../components/page\"\r\nimport \"./index.scss\"\r\n\r\nexport default function TransitionDemo() {\r\n  const [name, setName] = useState<TransitionName>(TransitionName.Fade)\r\n  const [state, setState] = useState(false)\r\n\r\n  function toggleTransition(newName: TransitionName) {\r\n    setName(newName)\r\n    setState(!state)\r\n  }\r\n\r\n  return (\r\n    <Page title=\"内置样式\" className=\"style-demo\">\r\n      <Block variant=\"card\" title=\"文字省略\">\r\n        <View className={classNames(\"taroify-ellipsis\", \"ellipsis-text\")}>\r\n          这是一段最多显示一行的文字，后面的内容会省略省略省略\r\n        </View>\r\n        <View className={classNames(\"taroify-ellipsis--l2\", \"ellipsis-text\")}>\r\n          这是一段最多显示两行的文字，后面的内容会省略。这是一段最多显示两行的文字，后面的内容会省略。这是一段最多显示两行的文字，后面的内容会省略。\r\n        </View>\r\n      </Block>\r\n      <Block variant=\"card\" title=\"1px 边框\">\r\n        <View className={classNames(\"taroify-hairline--top\", \"hairline-line\")} />\r\n      </Block>\r\n      <Block variant=\"card\" title=\"动画\">\r\n        <Cell\r\n          clickable\r\n          title=\"Fade\"\r\n          rightIcon={<ArrowRight />}\r\n          onClick={() => toggleTransition(TransitionName.Fade)}\r\n        />\r\n        <Cell\r\n          clickable\r\n          title=\"Slide Up\"\r\n          rightIcon={<ArrowRight />}\r\n          onClick={() => toggleTransition(TransitionName.SlideUp)}\r\n        />\r\n        <Cell\r\n          clickable\r\n          title=\"Slide Down\"\r\n          rightIcon={<ArrowRight />}\r\n          onClick={() => toggleTransition(TransitionName.SlideDown)}\r\n        />\r\n        <Cell\r\n          clickable\r\n          title=\"Slide Left\"\r\n          rightIcon={<ArrowRight />}\r\n          onClick={() => toggleTransition(TransitionName.SlideLeft)}\r\n        />\r\n        <Cell\r\n          clickable\r\n          title=\"Slide Right\"\r\n          rightIcon={<ArrowRight />}\r\n          onClick={() => toggleTransition(TransitionName.SlideRight)}\r\n        />\r\n        <Transition in={state} name={name} onEntered={() => setState(false)}>\r\n          <View className=\"animate-block\" />\r\n        </Transition>\r\n      </Block>\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}