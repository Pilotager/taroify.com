{"version":3,"sources":["webpack:///../../../../packages/icons/src/utils/index.ts","webpack:///../../../../packages/core/src/cell/style/index.ts","webpack:///../../../../packages/core/src/cell/cell-group.context.ts","webpack:///../../../../packages/core/src/cell/base-cell.tsx","webpack:///../../../../packages/core/src/cell/cell.tsx","webpack:///../../../../packages/core/src/cell/cell-group.tsx","webpack:///../../../../packages/core/src/cell/index.ts","webpack:///../../../../packages/core/src/stepper/stepper.context.ts","webpack:///../../../../packages/core/src/stepper/stepper-button.tsx","webpack:///../../../../packages/core/src/stepper/stepper-input.tsx","webpack:///../../../../packages/core/src/stepper/stepper.tsx","webpack:///../../../../packages/core/src/stepper/index.ts","webpack:///./src/pages/form/stepper/index.tsx"],"names":["isValidElement","element","isIconElement","cloneElement","node","className","oldProps","props","newProps","classNames","createContext","BaseCell","size","clickable","clickableProp","required","bordered","children","useContext","prefixClassname","align","icon","cloneIconElement","title","brief","rightIcon","inset","CellGroupContext","value","Cell","React","Object","StepperButton","type","disabled","onClick","onTouchStart","onTouchEnd","onTouchCancel","min","max","onStep","disabledProp","longPressRef","useRef","longPressTimerRef","longPressStep","useCallback","setTimeout","handleTouchStart","clearTimeout","longPress","handleTouchEnd","event","preventDefault","style","getSizeStyle","StepperInput","onFocus","precision","onChange","digit","rootRef","useState","useEffect","setValue","handleFocus","onInput","inputValue","formatted","formatNumber","String","pair","isNumeric","onBlur","input","formatValue","ref","width","addUnitPx","height","Stepper","Number","step","shape","onChangeProp","useStepperChildren","useMemo","__children__","Children","child","elementType","increase","useValue","defaultValue","Math","valueRef","useToRef","actionType","diff","addNumber","StepperContext","StepperDemo","variant","Button","Input"],"mappings":"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","file":"chunk/81.848c2c9e.js","sourcesContent":["import classNames from \"classnames\"\r\nimport * as _ from \"lodash\"\r\nimport { cloneElement, isValidElement, ReactElement, ReactNode } from \"react\"\r\nimport { ICON_TYPE, IconProps } from \"../shared\"\r\n\r\nexport function isIconElement(node?: ReactNode): boolean {\r\n  // Is`t not ReactElement\r\n  if (!isValidElement(node)) {\r\n    return false\r\n  }\r\n  const element = node as ReactElement\r\n  return _.hasIn(element.type, ICON_TYPE)\r\n}\r\n\r\nexport function cloneIconElement(node: ReactNode, props: IconProps): ReactNode {\r\n  if (!isIconElement(node)) {\r\n    return isValidElement(node) ? cloneElement(node, props) : node\r\n  }\r\n  const { className, ...restProps } = props\r\n  const element = node as ReactElement\r\n  const { props: oldProps } = element\r\n  const newProps: IconProps = {\r\n    ...oldProps,\r\n    className: classNames(oldProps.className, className),\r\n    ...restProps,\r\n  }\r\n  return cloneElement(element, newProps)\r\n}\r\n","import \"../../styles/style\"\r\nimport \"../index.scss\"\r\n","import { createContext } from \"react\"\r\n\r\ninterface CellGroupContextValue {\r\n  clickable?: boolean\r\n}\r\n\r\nconst CellGroupContext = createContext<CellGroupContextValue>({})\r\n\r\nexport default CellGroupContext\r\n","import { cloneIconElement } from \"@taroify/icons/utils\"\r\nimport { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode, useContext } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport CellGroupContext from \"./cell-group.context\"\r\nimport { CellAlign, CellSize } from \"./cell.shared\"\r\n\r\nexport interface BaseCellProps extends ViewProps {\r\n  titleClassName?: string\r\n  briefClassName?: string\r\n  valueClassName?: string\r\n  size?: CellSize\r\n  align?: CellAlign\r\n  title?: ReactNode\r\n  brief?: ReactNode\r\n  icon?: ReactNode\r\n  rightIcon?: ReactNode\r\n  bordered?: boolean\r\n  required?: boolean\r\n  clickable?: boolean\r\n  children?: ReactNode\r\n}\r\n\r\nfunction BaseCell(props: BaseCellProps) {\r\n  const {\r\n    className,\r\n    titleClassName,\r\n    briefClassName,\r\n    valueClassName,\r\n    size = \"medium\",\r\n    align,\r\n    title,\r\n    brief,\r\n    clickable: clickableProp = false,\r\n    required = false,\r\n    bordered = true,\r\n    icon,\r\n    rightIcon,\r\n    children,\r\n    ...restProps\r\n  } = props\r\n\r\n  const { clickable } = useContext(CellGroupContext)\r\n\r\n  return (\r\n    <View\r\n      className={classNames(\r\n        prefixClassname(\"cell\"),\r\n        {\r\n          [prefixClassname(\"cell--start\")]: align === \"start\",\r\n          [prefixClassname(\"cell--center\")]: align === \"center\",\r\n          [prefixClassname(\"cell--end\")]: align === \"end\",\r\n          [prefixClassname(\"cell--large\")]: size === \"large\",\r\n          [prefixClassname(\"cell--clickable\")]: clickableProp || clickable,\r\n          [prefixClassname(\"cell--required\")]: required,\r\n          [prefixClassname(\"cell--borderless\")]: !bordered,\r\n        },\r\n        className,\r\n      )}\r\n      {...restProps}\r\n    >\r\n      {icon && cloneIconElement(icon, { className: prefixClassname(\"cell__icon\") })}\r\n      {title && (\r\n        <View className={classNames(prefixClassname(\"cell__title\"), titleClassName)}>\r\n          {title}\r\n          {brief && (\r\n            <View\r\n              className={classNames(prefixClassname(\"cell__brief\"), briefClassName)}\r\n              children={brief}\r\n            />\r\n          )}\r\n        </View>\r\n      )}\r\n      {children && (\r\n        <View\r\n          className={classNames(\r\n            prefixClassname(\"cell__value\"),\r\n            {\r\n              [prefixClassname(\"cell__value--alone\")]: !title,\r\n            },\r\n            valueClassName,\r\n          )}\r\n          children={children}\r\n        />\r\n      )}\r\n      {rightIcon && cloneIconElement(rightIcon, { className: prefixClassname(\"cell__right-icon\") })}\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default BaseCell\r\n","import { ViewProps } from \"@tarojs/components/types/View\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport BaseCell from \"./base-cell\"\r\nimport { CellAlign, CellSize } from \"./cell.shared\"\r\n\r\nexport interface CellProps extends ViewProps {\r\n  size?: CellSize\r\n  align?: CellAlign\r\n  title?: ReactNode\r\n  brief?: ReactNode\r\n  icon?: ReactNode\r\n  rightIcon?: ReactNode\r\n  bordered?: boolean\r\n  clickable?: boolean\r\n  children?: ReactNode\r\n}\r\n\r\nfunction Cell(props: CellProps) {\r\n  return <BaseCell {...props} />\r\n}\r\n\r\nexport default Cell\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport CellGroupContext from \"./cell-group.context\"\r\n\r\ninterface CellGroupProps extends ViewProps {\r\n  title?: ReactNode\r\n  clickable?: boolean\r\n  inset?: boolean\r\n  bordered?: boolean\r\n  children?: ReactNode\r\n}\r\n\r\nexport function CellGroup(props: CellGroupProps) {\r\n  const { title, clickable = false, inset = false, bordered = true, children, ...restProps } = props\r\n  return (\r\n    <CellGroupContext.Provider\r\n      value={{\r\n        clickable,\r\n      }}\r\n    >\r\n      <View\r\n        className={classNames(prefixClassname(\"cell-group\"), {\r\n          [prefixClassname(\"cell-group--inset\")]: inset,\r\n        })}\r\n        {...restProps}\r\n      >\r\n        {title && (\r\n          <View\r\n            className={classNames(prefixClassname(\"cell-group__title\"), {\r\n              [prefixClassname(\"cell-group__title--inset\")]: inset,\r\n            })}\r\n            children={title}\r\n          />\r\n        )}\r\n        <View\r\n          className={classNames(prefixClassname(\"cell-group\"), {\r\n            [prefixClassname(\"hairline--top-bottom\")]: bordered,\r\n          })}\r\n          children={children}\r\n        />\r\n      </View>\r\n    </CellGroupContext.Provider>\r\n  )\r\n}\r\n\r\nexport default CellGroup\r\n","import CellElement, { CellProps } from \"./cell\"\r\nimport CellGroup from \"./cell-group\"\r\n\r\nexport type { CellAlign, CellSize } from \"./cell.shared\"\r\nexport { default as BaseCell } from \"./base-cell\"\r\n\r\ninterface CellInterface {\r\n  (props: CellProps): JSX.Element\r\n\r\n  Group: typeof CellGroup\r\n}\r\n\r\nconst Cell = CellElement as CellInterface\r\nCell.Group = CellGroup\r\n\r\nexport default Cell\r\n","import { createContext } from \"react\"\r\nimport { StepperActionType } from \"./stepper.shared\"\r\n\r\ninterface StepperContextValue {\r\n  value?: number | string\r\n  min?: number\r\n  max?: number\r\n  size?: number | string\r\n  disabled?: boolean\r\n  precision?: number\r\n  longPress?: boolean\r\n\r\n  formatValue?(value?: number | string): number | string\r\n\r\n  onStep?(action: StepperActionType): void\r\n\r\n  onChange?(value?: number | string): void\r\n}\r\n\r\nconst StepperContext = createContext<StepperContextValue>({})\r\n\r\nexport default StepperContext\r\n","import { ITouchEvent, View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { useCallback, useContext, useRef } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport { preventDefault } from \"../utils/dom/event\"\r\nimport { getSizeStyle } from \"../utils/format/unit\"\r\nimport StepperContext from \"./stepper.context\"\r\nimport { StepperActionType } from \"./stepper.shared\"\r\n\r\nconst LONG_PRESS_INTERVAL = 200\r\n\r\nconst LONG_PRESS_START_TIME = 600\r\n\r\ninterface StepperButtonProps extends ViewProps {\r\n  disabled?: boolean\r\n\r\n  onClick?(event: ITouchEvent): void\r\n}\r\n\r\ninterface InternalStepperButtonProps extends StepperButtonProps {\r\n  type?: StepperActionType\r\n}\r\n\r\nfunction StepperButton(props: StepperButtonProps) {\r\n  const {\r\n    className,\r\n    style,\r\n    type = \"decrease\",\r\n    disabled: disabledProp,\r\n    onClick,\r\n    onTouchStart,\r\n    onTouchEnd,\r\n    onTouchCancel,\r\n    ...restProps\r\n  } = props as InternalStepperButtonProps\r\n\r\n  const {\r\n    value = 0,\r\n    min = 0,\r\n    max = 0,\r\n    size,\r\n    disabled: disabledCtx,\r\n    longPress,\r\n    onStep,\r\n  } = useContext(StepperContext)\r\n\r\n  const disabled =\r\n    disabledProp ||\r\n    disabledCtx ||\r\n    (type === \"decrease\" && value <= min) ||\r\n    (type === \"increase\" && value >= max)\r\n\r\n  const longPressRef = useRef(false)\r\n\r\n  let longPressTimerRef = useRef<NodeJS.Timeout>()\r\n\r\n  const longPressStep = useCallback(() => {\r\n    longPressTimerRef.current = setTimeout(() => {\r\n      onStep?.(type)\r\n      longPressStep()\r\n    }, LONG_PRESS_INTERVAL)\r\n  }, [onStep, type])\r\n\r\n  const handleTouchStart = useCallback(() => {\r\n    if (longPress) {\r\n      longPressRef.current = false\r\n      if (longPressTimerRef.current) {\r\n        clearTimeout(longPressTimerRef.current)\r\n      }\r\n      longPressTimerRef.current = setTimeout(() => {\r\n        longPressRef.current = true\r\n        onStep?.(type)\r\n        longPressStep()\r\n      }, LONG_PRESS_START_TIME)\r\n    }\r\n  }, [longPress, longPressStep, onStep, type])\r\n\r\n  const handleTouchEnd = useCallback(\r\n    (event: ITouchEvent) => {\r\n      if (longPress) {\r\n        if (longPressTimerRef.current) {\r\n          clearTimeout(longPressTimerRef.current)\r\n        }\r\n        if (longPressRef.current) {\r\n          preventDefault(event)\r\n        }\r\n      }\r\n    },\r\n    [longPress],\r\n  )\r\n\r\n  return (\r\n    <View\r\n      className={classNames(\r\n        prefixClassname(`stepper__${type}`),\r\n        {\r\n          [prefixClassname(`stepper__${type}--disabled`)]: disabled,\r\n        },\r\n        className,\r\n      )}\r\n      style={getSizeStyle(size)}\r\n      onClick={(event) => {\r\n        preventDefault(event)\r\n        onClick?.(event)\r\n        if (!disabled) {\r\n          onStep?.(type)\r\n        }\r\n      }}\r\n      onTouchStart={(event) => {\r\n        onTouchStart?.(event)\r\n        if (!disabled) {\r\n          handleTouchStart()\r\n        }\r\n      }}\r\n      onTouchEnd={(event) => {\r\n        onTouchEnd?.(event)\r\n        handleTouchEnd(event)\r\n      }}\r\n      onTouchCancel={(event) => {\r\n        onTouchCancel?.(event)\r\n        handleTouchEnd(event)\r\n      }}\r\n      {...restProps}\r\n    />\r\n  )\r\n}\r\n\r\nexport default StepperButton\r\n","import { Input } from \"@tarojs/components\"\r\nimport { BaseEventOrig, CommonEventFunction, ITouchEvent } from \"@tarojs/components/types/common\"\r\nimport { InputProps } from \"@tarojs/components/types/Input\"\r\nimport * as React from \"react\"\r\nimport { useCallback, useContext, useEffect, useRef, useState } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport { preventDefault } from \"../utils/dom/event\"\r\nimport { formatNumber } from \"../utils/format/number\"\r\nimport { addUnitPx } from \"../utils/format/unit\"\r\nimport StepperContext from \"./stepper.context\"\r\n\r\ninterface StepperInputProps {\r\n  width?: number | string\r\n  disabled?: boolean\r\n  onFocus?: CommonEventFunction<InputProps.inputForceEventDetail>\r\n}\r\n\r\nfunction StepperInput(props: StepperInputProps) {\r\n  const { width, disabled: disabledProp, onFocus } = props\r\n  const { value: valueProp, size, disabled, precision = 0, formatValue, onChange } = useContext(\r\n    StepperContext,\r\n  )\r\n  const digit = precision > 0\r\n\r\n  const rootRef = useRef<HTMLElement>()\r\n\r\n  const [value, setValue] = useState<string | number>()\r\n\r\n  useEffect(() => setValue(valueProp), [valueProp])\r\n\r\n  const onTouchEnd = useCallback(\r\n    (event: ITouchEvent) => {\r\n      // fix mobile safari page scroll down issue\r\n      // see: https://github.com/youzan/vant/issues/7690\r\n      if (disabledProp) {\r\n        preventDefault(event)\r\n      }\r\n    },\r\n    [disabledProp],\r\n  )\r\n\r\n  const handleFocus = useCallback(\r\n    (event: BaseEventOrig<InputProps.inputForceEventDetail>) => {\r\n      // readonly not work in legacy mobile safari\r\n      if (disabledProp) {\r\n        rootRef.current?.blur()\r\n      } else {\r\n        onFocus?.(event)\r\n      }\r\n    },\r\n    [disabledProp, onFocus],\r\n  )\r\n\r\n  const onInput = useCallback(\r\n    (event: BaseEventOrig<InputProps.inputEventDetail>) => {\r\n      const input = event.target as HTMLInputElement\r\n      const { value: inputValue } = input\r\n\r\n      let formatted = formatNumber(String(inputValue), digit)\r\n\r\n      // limit max decimal length\r\n      if (precision > 0 && formatted.includes(\".\")) {\r\n        const pair = formatted.split(\".\")\r\n        formatted = `${pair[0]}.${pair[1].slice(0, precision)}`\r\n      }\r\n\r\n      // prefer number type\r\n      const isNumeric = formatted === String(+formatted)\r\n      setValue(isNumeric ? +formatted : formatted)\r\n    },\r\n    [digit, precision],\r\n  )\r\n\r\n  const onBlur = useCallback(\r\n    (event: BaseEventOrig<InputProps.inputValueEventDetail>) => {\r\n      const input = event.target as HTMLInputElement\r\n      const value = formatValue?.(input.value)\r\n      setValue(value)\r\n      onChange?.(value)\r\n    },\r\n    [formatValue, onChange],\r\n  )\r\n\r\n  return (\r\n    <Input\r\n      ref={rootRef}\r\n      className={prefixClassname(\"stepper__input\")}\r\n      style={{\r\n        width: width ? addUnitPx(width) : \"\",\r\n        height: size ? addUnitPx(size) : \"\",\r\n      }}\r\n      disabled={disabledProp || disabled}\r\n      type={digit ? \"digit\" : \"number\"}\r\n      value={(value as unknown) as string}\r\n      onTouchEnd={onTouchEnd}\r\n      onFocus={handleFocus}\r\n      onInput={onInput}\r\n      onBlur={onBlur}\r\n    />\r\n  )\r\n}\r\n\r\nexport default StepperInput\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport {\r\n  Children,\r\n  cloneElement,\r\n  isValidElement,\r\n  ReactElement,\r\n  ReactNode,\r\n  useCallback,\r\n  useMemo,\r\n} from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport { addNumber, formatNumber } from \"../utils/format/number\"\r\nimport { useToRef, useValue } from \"../utils/state\"\r\nimport StepperButton from \"./stepper-button\"\r\nimport StepperInput from \"./stepper-input\"\r\nimport StepperContext from \"./stepper.context\"\r\nimport { StepperActionType } from \"./stepper.shared\"\r\n\r\ninterface StepperChildren {\r\n  decrease?: ReactNode\r\n  input?: ReactNode\r\n  increase?: ReactNode\r\n}\r\n\r\nfunction useStepperChildren(children?: ReactNode): StepperChildren {\r\n  return useMemo(() => {\r\n    const __children__: StepperChildren = {}\r\n\r\n    Children.forEach(children, (child: ReactNode) => {\r\n      if (!isValidElement(child)) {\r\n        return\r\n      }\r\n\r\n      const element = child as ReactElement\r\n      const elementType = element.type\r\n\r\n      if (elementType === StepperButton) {\r\n        if (__children__.decrease === undefined) {\r\n          __children__.decrease = cloneElement(element, {\r\n            type: \"decrease\",\r\n          })\r\n        } else if (__children__.increase === undefined) {\r\n          __children__.increase = cloneElement(element, {\r\n            type: \"increase\",\r\n          })\r\n        }\r\n      } else if (elementType === StepperInput) {\r\n        __children__.input = element\r\n      }\r\n    })\r\n\r\n    if (!children) {\r\n      const element = <StepperButton />\r\n      if (__children__.decrease === undefined) {\r\n        __children__.decrease = cloneElement(element, { type: \"decrease\" })\r\n      }\r\n\r\n      if (__children__.input === undefined) {\r\n        __children__.input = <StepperInput />\r\n      }\r\n\r\n      if (__children__.increase === undefined) {\r\n        __children__.increase = cloneElement(element, { type: \"increase\" })\r\n      }\r\n    }\r\n\r\n    return __children__\r\n  }, [children])\r\n}\r\n\r\ntype StepperShape = \"square\" | \"round\"\r\n\r\nexport interface StepperProps extends ViewProps {\r\n  defaultValue?: number | string\r\n  value?: number | string\r\n  min?: number\r\n  max?: number\r\n  step?: number\r\n  size?: number | string\r\n  disabled?: boolean\r\n  precision?: number\r\n  longPress?: boolean\r\n  shape?: StepperShape\r\n  children?: ReactNode\r\n\r\n  onChange?(value: number | string): void\r\n}\r\n\r\nfunction Stepper(props: StepperProps) {\r\n  const {\r\n    className,\r\n    defaultValue,\r\n    value: valueProp,\r\n    min = 1,\r\n    max = Number.MAX_VALUE,\r\n    step = 1,\r\n    size,\r\n    disabled,\r\n    precision = 0,\r\n    longPress = true,\r\n    shape = \"square\",\r\n    children: childrenProp,\r\n    onChange: onChangeProp,\r\n    ...restProps\r\n  } = props\r\n\r\n  const { decrease, input, increase } = useStepperChildren(childrenProp)\r\n\r\n  const { value = 0, setValue } = useValue({\r\n    value: valueProp,\r\n    defaultValue,\r\n    onChange: onChangeProp,\r\n  })\r\n\r\n  const formatValue = useCallback(\r\n    (value: string | number) => {\r\n      if (value === \"\") {\r\n        return value\r\n      }\r\n\r\n      value = formatNumber(String(value), precision > 0)\r\n      value = value === \"\" ? 0 : +value\r\n      value = Number.isNaN(value) ? +min : value\r\n      value = Math.max(Math.min(+max, value), +min)\r\n\r\n      // format decimal\r\n      if (precision > 0) {\r\n        value = value.toFixed(+precision)\r\n      }\r\n\r\n      return value\r\n    },\r\n    [max, min, precision],\r\n  )\r\n\r\n  const valueRef = useToRef(formatValue(value))\r\n\r\n  const onStep = useCallback(\r\n    (actionType: StepperActionType) => {\r\n      const diff = actionType === \"decrease\" ? -step : +step\r\n      setValue(formatValue(addNumber(valueRef.current as number, diff)))\r\n    },\r\n    [formatValue, setValue, step, valueRef],\r\n  )\r\n\r\n  return (\r\n    <StepperContext.Provider\r\n      value={{\r\n        value: valueRef.current,\r\n        min,\r\n        max,\r\n        size,\r\n        disabled,\r\n        precision,\r\n        longPress,\r\n        formatValue,\r\n        onChange: setValue,\r\n        onStep,\r\n      }}\r\n    >\r\n      <View\r\n        className={classNames(\r\n          prefixClassname(\"stepper\"),\r\n          {\r\n            [prefixClassname(\"stepper--round\")]: shape === \"round\",\r\n          },\r\n          className,\r\n        )}\r\n        {...restProps}\r\n      >\r\n        {decrease}\r\n        {input}\r\n        {increase}\r\n      </View>\r\n    </StepperContext.Provider>\r\n  )\r\n}\r\n\r\nexport default Stepper\r\n","import { default as StepperElement, StepperProps } from \"./stepper\"\nimport StepperButton from \"./stepper-button\"\nimport StepperInput from \"./stepper-input\"\n\ninterface StepperInterface {\n  (props: StepperProps): JSX.Element\n\n  Input: typeof StepperInput\n  Button: typeof StepperButton\n}\n\nconst Stepper = StepperElement as StepperInterface\n\nStepper.Input = StepperInput\nStepper.Button = StepperButton\n\nexport default Stepper\n","import { Cell, Stepper } from \"@taroify/core\"\r\nimport * as React from \"react\"\r\nimport Block from \"../../../components/block\"\r\nimport Page from \"../../../components/page\"\r\nimport \"./index.scss\"\r\n\r\nexport default function StepperDemo() {\r\n  return (\r\n    <Page title=\"Stepper 步进器\" className=\"stepper-demo\">\r\n      <Block variant=\"card\">\r\n        <Cell title=\"基本用法\">\r\n          <Stepper />\r\n        </Cell>\r\n        <Cell title=\"步长设置\">\r\n          <Stepper step={2} />\r\n        </Cell>\r\n        <Cell title=\"限制输入范围\">\r\n          <Stepper min={5} max={8} />\r\n        </Cell>\r\n        <Cell title=\"禁用状态\">\r\n          <Stepper disabled />\r\n        </Cell>\r\n        <Cell title=\"禁用输入框\">\r\n          <Stepper>\r\n            <Stepper.Button />\r\n            <Stepper.Input disabled />\r\n            <Stepper.Button />\r\n          </Stepper>\r\n        </Cell>\r\n        <Cell title=\"固定小数位数\">\r\n          <Stepper precision={2} />\r\n        </Cell>\r\n        <Cell align=\"center\" title=\"自定义大小\">\r\n          <Stepper size=\"32\">\r\n            <Stepper.Button />\r\n            <Stepper.Input disabled width=\"40\" />\r\n            <Stepper.Button />\r\n          </Stepper>\r\n        </Cell>\r\n        <Cell title=\"圆角风格\">\r\n          <Stepper shape=\"round\" size=\"22\" />\r\n        </Cell>\r\n      </Block>\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}