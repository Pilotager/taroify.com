{"version":3,"sources":["webpack:///./src/components/block.tsx","webpack:///../../../../packages/icons/src/utils/index.ts","webpack:///../../../../packages/core/src/badge/style/index.ts","webpack:///../../../../packages/core/src/badge/badge.tsx","webpack:///../../../../packages/core/src/badge/use-badge.tsx","webpack:///./src/pages/display/badge/index.tsx"],"names":["Block","props","className","variant","title","children","classNames","demoPrefixClassname","isValidElement","element","isIconElement","cloneElement","node","oldProps","newProps","Badge","content","isIcon","useMemo","hasChildren","noneChildren","cloneIconElement","React","prefixClassname","dot","elementTypeOf","badge","BadgeDemo","max"],"mappings":"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","file":"chunk/80.25bf9c4d.js","sourcesContent":["import { View } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { demoPrefixClassname } from \"../styles/prefix\"\r\nimport \"./block.scss\"\r\n\r\ntype BlockVariant = \"card\"\r\n\r\ninterface BlockProps {\r\n  className?: string\r\n  variant?: BlockVariant\r\n  title?: ReactNode\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function Block(props: BlockProps) {\r\n  const { className, variant, title, children } = props\r\n  return (\r\n    <View className={classNames(demoPrefixClassname(\"block\"), className)}>\r\n      {title && <View className={demoPrefixClassname(\"block__title\")} children={title} />}\r\n      <View\r\n        className={classNames({\r\n          [demoPrefixClassname(\"block__content\")]: variant !== \"card\",\r\n          [demoPrefixClassname(\"block__card\")]: variant === \"card\",\r\n        })}\r\n      >\r\n        {children}\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n","import classNames from \"classnames\"\r\nimport * as _ from \"lodash\"\r\nimport { cloneElement, isValidElement, ReactElement, ReactNode } from \"react\"\r\nimport { ICON_TYPE, IconProps } from \"../shared\"\r\n\r\nexport function isIconElement(node?: ReactNode): boolean {\r\n  // Is`t not ReactElement\r\n  if (!isValidElement(node)) {\r\n    return false\r\n  }\r\n  const element = node as ReactElement\r\n  return _.hasIn(element.type, ICON_TYPE)\r\n}\r\n\r\nexport function cloneIconElement(node: ReactNode, props: IconProps): ReactNode {\r\n  if (!isIconElement(node)) {\r\n    return isValidElement(node) ? cloneElement(node, props) : node\r\n  }\r\n  const { className, ...restProps } = props\r\n  const element = node as ReactElement\r\n  const { props: oldProps } = element\r\n  const newProps: IconProps = {\r\n    ...oldProps,\r\n    className: classNames(oldProps.className, className),\r\n    ...restProps,\r\n  }\r\n  return cloneElement(element, newProps)\r\n}\r\n","import \"../../styles/style\"\r\nimport \"../index.scss\"\r\n","import { cloneIconElement, isIconElement } from \"@taroify/icons/utils\"\r\nimport { View } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport * as _ from \"lodash\"\r\nimport * as React from \"react\"\r\nimport { ReactNode, useMemo } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\nexport interface BadgeProps {\r\n  className?: string\r\n  content?: ReactNode\r\n  max?: number\r\n  dot?: boolean\r\n  children?: ReactNode\r\n}\r\n\r\nfunction Badge(props: BadgeProps): JSX.Element {\r\n  const { className, content: contentProp, max, dot, children } = props\r\n  const isIcon = useMemo(() => isIconElement(children), [children])\r\n  const hasChildren = children !== undefined\r\n  const noneChildren = children === undefined\r\n\r\n  const content = _.toString(\r\n    _.isNumber(contentProp) && _.gt(contentProp, max) ? `${max}+` : contentProp,\r\n  )\r\n\r\n  return cloneIconElement(isIcon ? children : <View />, {\r\n    className: classNames(\r\n      {\r\n        [prefixClassname(\"badge__wrapper\")]: hasChildren,\r\n        [prefixClassname(\"badge\")]: noneChildren,\r\n        [prefixClassname(\"badge--dot\")]: noneChildren && dot,\r\n      },\r\n      className,\r\n    ),\r\n    children: (\r\n      <>\r\n        {!isIcon && children}\r\n        {noneChildren && !dot && content}\r\n        {hasChildren && (dot || content) && (\r\n          <View\r\n            className={classNames(\r\n              prefixClassname(\"badge\"),\r\n              {\r\n                [prefixClassname(\"badge--dot\")]: dot,\r\n                [prefixClassname(\"badge--content\")]: content,\r\n              },\r\n              prefixClassname(\"badge--fixed\"),\r\n            )}\r\n            children={!dot && content}\r\n          />\r\n        )}\r\n      </>\r\n    ),\r\n  }) as React.ReactElement\r\n}\r\n\r\nexport default Badge\r\n","import * as _ from \"lodash\"\r\nimport * as React from \"react\"\r\nimport { cloneElement, isValidElement, ReactElement, ReactNode } from \"react\"\r\nimport Badge, { BadgeProps } from \"./badge\"\r\n\r\ninterface BadgeChildren {\r\n  children?: ReactNode\r\n}\r\n\r\nfunction elementTypeOf(node: ReactNode, type: any) {\r\n  return isValidElement(node) && (node as ReactElement).type === type\r\n}\r\n\r\nexport default function useBadge(badge: ReactNode, props: BadgeProps = {}) {\r\n  if (_.isBoolean(badge) && badge) {\r\n    return ({ children }: BadgeChildren) => <Badge {...props} dot children={children} />\r\n  }\r\n\r\n  if (_.isNumber(badge) || _.isString(badge)) {\r\n    return ({ children }: BadgeChildren) => <Badge {...props} content={badge} children={children} />\r\n  }\r\n\r\n  if (elementTypeOf(badge, Badge)) {\r\n    return ({ children }: BadgeChildren) =>\r\n      cloneElement(badge as ReactElement, {\r\n        ...props,\r\n        children,\r\n      })\r\n  }\r\n  return ({ children }: BadgeChildren) => <Badge {...props} children={children} />\r\n}\r\n","import { Badge } from \"@taroify/core\"\r\nimport { Cross, Down, Success } from \"@taroify/icons\"\r\nimport { View } from \"@tarojs/components\"\r\nimport * as React from \"react\"\r\nimport Block from \"../../../components/block\"\r\nimport Page from \"../../../components/page\"\r\nimport \"./index.scss\"\r\n\r\nexport default function BadgeDemo() {\r\n  return (\r\n    <Page title=\"Badge 徽标\" className=\"badge-demo\">\r\n      <Block title=\"基础用法\">\r\n        <Badge content={5}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content=\"10\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content=\"Hot\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge dot>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n      </Block>\r\n      <Block title=\"最大值\">\r\n        <Badge content={10} max={9}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={21} max={20}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={100} max={99}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n      </Block>\r\n      <Block title=\"自定义颜色\">\r\n        <Badge className=\"custom-color\" content={5}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge className=\"custom-color\" content={10}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge className=\"custom-color\" content=\"Hot\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge className=\"custom-color\" dot>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n      </Block>\r\n      <Block title=\"自定义徽标内容\">\r\n        <Badge content={<Success className=\"badge-icon\" />}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={<Cross className=\"badge-icon\" />}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={<Down className=\"badge-icon\" />}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n      </Block>\r\n      <Block title=\"独立展示\" className=\"independent-badges\">\r\n        <Badge content=\"20\" />\r\n        <Badge content={100} max={99} />\r\n      </Block>\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}