{"version":3,"sources":["webpack:///../../../../packages/icons/src/utils/unit.ts","webpack:///../../../../packages/icons/src/van/VanIcon.tsx","webpack:///../../../../packages/core/src/styles/index.ts","webpack:///../../../../packages/core/src/styles/prefix.ts","webpack:///../../../../packages/icons/src/ArrowLeft.tsx","webpack:///./src/styles/prefix.ts","webpack:///../../../../packages/icons/src/shared.ts","webpack:///../../../../packages/icons/src/utils/index.ts","webpack:///./src/components/target.tsx","webpack:///./src/components/page.tsx","webpack:///./src/components/block.tsx","webpack:///../../../../packages/icons/src/ArrowRight.tsx","webpack:///../../../../packages/core/src/transition/transition.tsx","webpack:///../../../../packages/core/src/transition/style/index.ts","webpack:///../../../../packages/core/src/cell/cell-group.context.ts","webpack:///../../../../packages/core/src/cell/cell-base.tsx","webpack:///../../../../packages/core/src/cell/cell-brief.tsx","webpack:///../../../../packages/core/src/cell/cell-title.tsx","webpack:///../../../../packages/core/src/cell/cell-value.tsx","webpack:///../../../../packages/core/src/cell/cell.tsx","webpack:///../../../../packages/core/src/cell/cell-group.tsx","webpack:///../../../../packages/core/src/cell/index.ts","webpack:///../../../../packages/core/src/cell/style/index.ts","webpack:///./src/pages/basic/style/index.tsx"],"names":["value","convertPx","convertRem","getRootFontSize","doc","document","fontSize","window","rootFontSize","parseFloat","convertVw","convertVh","unitToPx","size","color","presetColor","ICON_PRESET_COLORS","presetSize","ICON_PRESET_SIZES","className","classNames","style","addUnitPx","name","VanIconWrapper","ArrowLeft","createVanIconComponent","demoPrefixClassname","component","ICON_TYPE","Symbol","isValidElement","element","isIconElement","cloneElement","node","oldProps","props","newProps","TargetType","Target","type","children","process","Page","title","onClick","navigateBack","Block","variant","ArrowRight","TransitionName","TRANSITION_PRESETS","in","inProp","appear","mountOnEnter","timeout","onEnter","onExited","useMemo","childrenStyle","useElementStyle","transactionName","isTransitionPreset","prefixClassname","useState","unmountOnExit","display","enter","setEnter","setExited","onEntering","onEntered","onExit","onExiting","createContext","CellBase","clickable","clickableProp","required","bordered","useContext","align","icon","cloneIconElement","rightIcon","CellBrief","CellTitle","CellValue","alone","inset","CellGroupContext","Cell","brief","TransitionDemo","Fade","setName","state","setState","toggleTransition","newName","SlideUp","SlideDown","SlideLeft","SlideRight"],"mappings":"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","file":"chunk/69.7465f52e.js","sourcesContent":["export function addUnitPx(value?: string | number): string {\r\n  return value === undefined ? \"\" : `${unitToPx(value)}px`\r\n}\r\n\r\n// cache\r\nlet rootFontSize: number\r\n\r\nfunction getRootFontSize() {\r\n  if (!rootFontSize) {\r\n    const doc = document.documentElement\r\n    const fontSize = doc.style.fontSize || window.getComputedStyle(doc).fontSize\r\n\r\n    rootFontSize = parseFloat(fontSize)\r\n  }\r\n\r\n  return rootFontSize\r\n}\r\n\r\nfunction convertPx(value: string) {\r\n  value = value.replace(/px/g, \"\")\r\n  return +value\r\n}\r\n\r\nfunction convertRem(value: string) {\r\n  value = value.replace(/rem/g, \"\")\r\n  return +value * getRootFontSize()\r\n}\r\n\r\nfunction convertVw(value: string) {\r\n  value = value.replace(/vw/g, \"\")\r\n  return (+value * window.innerWidth) / 100\r\n}\r\n\r\nfunction convertVh(value: string) {\r\n  value = value.replace(/vh/g, \"\")\r\n  return (+value * window.innerHeight) / 100\r\n}\r\n\r\nexport function unitToPx(value: string | number): number {\r\n  if (typeof value === \"number\") {\r\n    return value\r\n  }\r\n\r\n  if (value.includes(\"px\")) {\r\n    return convertPx(value)\r\n  }\r\n  if (value.includes(\"rem\")) {\r\n    return convertRem(value)\r\n  }\r\n  if (value.includes(\"vw\")) {\r\n    return convertVw(value)\r\n  }\r\n  if (value.includes(\"vh\")) {\r\n    return convertVh(value)\r\n  }\r\n\r\n  return parseFloat(value)\r\n}\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { CSSProperties, ReactNode } from \"react\"\r\nimport {\r\n  ICON_PRESET_COLORS,\r\n  ICON_PRESET_SIZES,\r\n  ICON_TYPE,\r\n  IconColor,\r\n  IconProps,\r\n  IconSize,\r\n} from \"../shared\"\r\nimport { addUnitPx } from \"../utils/unit\"\r\n\r\ninterface VanIconProps extends ViewProps {\r\n  className?: string\r\n  style?: CSSProperties\r\n  name?: string\r\n  size?: IconSize | number | string\r\n  color?: IconColor | string\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function VanIcon(props: VanIconProps) {\r\n  const { className, style, name, size = \"inherit\", color = \"inherit\", ...restProps } = props\r\n  const presetColor = ICON_PRESET_COLORS.includes(color as IconColor)\r\n  const presetSize = ICON_PRESET_SIZES.includes(size as IconSize)\r\n\r\n  return (\r\n    <View\r\n      className={classNames(\r\n        \"van-icon\",\r\n        `van-icon-${name}`,\r\n        \"taroify-icon\",\r\n        {\r\n          [`taroify-icon--${color}`]: presetColor,\r\n          [`taroify-icon--${size}`]: presetSize,\r\n        },\r\n        className,\r\n      )}\r\n      style={{\r\n        color: presetColor ? \"\" : color,\r\n        fontSize: presetSize ? \"\" : addUnitPx(size),\r\n        ...style,\r\n      }}\r\n      {...restProps}\r\n    />\r\n  )\r\n}\r\n\r\nexport function createVanIconComponent(name: string) {\r\n  function VanIconWrapper(props: IconProps) {\r\n    return <VanIcon name={name} {...props} />\r\n  }\r\n\r\n  // @ts-ignore\r\n  VanIconWrapper[ICON_TYPE] = ICON_TYPE\r\n  return VanIconWrapper\r\n}\r\n","export { prefixClassname } from \"./prefix\"\n","const COMPONENT_PREFIX = \"\\u0074\\u0061\\u0072\\u006f\\u0069\\u0066\\u0079-\"\r\n\r\nexport function prefixClassname(component: string) {\r\n  return `${COMPONENT_PREFIX}${component}`\r\n}\r\n","import { createVanIconComponent } from \"./van\"\r\n\r\nconst ArrowLeft = createVanIconComponent(\"arrow-left\")\r\nexport default ArrowLeft\r\n","const DEMO_PREFIX = \"taroify-demo-\"\n\nexport function demoPrefixClassname(component: string) {\n  return `${DEMO_PREFIX}${component}`\n}\n","import { ViewProps } from \"@tarojs/components/types/View\"\r\nimport { CSSProperties, ReactNode } from \"react\"\r\n\r\nexport const ICON_TYPE = Symbol(\"__iconType__\")\r\n\r\nexport type IconSize = \"inherit\" | \"mini\" | \"small\" | \"medium\" | \"large\"\r\n\r\nexport const ICON_PRESET_SIZES = [\"inherit\", \"mini\", \"small\", \"medium\", \"large\"]\r\n\r\nexport type IconColor =\r\n  | \"inherit\"\r\n  | \"default\"\r\n  | \"primary\"\r\n  | \"info\"\r\n  | \"success\"\r\n  | \"warning\"\r\n  | \"danger\"\r\n\r\nexport const ICON_PRESET_COLORS = [\r\n  \"inherit\",\r\n  \"default\",\r\n  \"primary\",\r\n  \"info\",\r\n  \"success\",\r\n  \"warning\",\r\n  \"danger\",\r\n]\r\n\r\nexport interface IconProps extends ViewProps {\r\n  className?: string\r\n  style?: CSSProperties\r\n  size?: IconSize | number | string\r\n  color?: IconColor | string\r\n  children?: ReactNode\r\n}\r\n","import classNames from \"classnames\"\nimport * as _ from \"lodash\"\nimport { cloneElement, isValidElement, ReactElement, ReactNode } from \"react\"\nimport { ICON_TYPE, IconProps } from \"../shared\"\n\nexport function isIconElement(node?: ReactNode): boolean {\n  // Is`t not ReactElement\n  if (!isValidElement(node)) {\n    return false\n  }\n  const element = node as ReactElement\n  return _.hasIn(element.type, ICON_TYPE)\n}\n\nexport function cloneIconElement(node: ReactNode, props: IconProps): ReactNode {\n  if (!isIconElement(node)) {\n    return isValidElement(node) ? cloneElement(node, props) : node\n  }\n  const { className, ...restProps } = props\n  const element = node as ReactElement\n  const { props: oldProps } = element\n  const newProps: IconProps = {\n    ...oldProps,\n    className: classNames(oldProps.className, className),\n    ...restProps,\n  }\n  return cloneElement(element, newProps)\n}\n","import { ReactNode } from \"react\"\r\n\r\n/* eslint-disable  no-shadow */\r\nexport enum TargetType {\r\n  /* eslint-enable  no-shadow */\r\n  H5 = \"h5\",\r\n}\r\n\r\ntype TargetTypeString = \"h5\"\r\n\r\ninterface TargetProps {\r\n  type?: TargetType | TargetTypeString\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function Target(props: TargetProps) {\r\n  const { type, children } = props\r\n  return <>{type === process.env.TARO_ENV && children}</>\r\n}\r\n","import ArrowLeft from \"@taroify/icons/ArrowLeft\"\r\nimport { View } from \"@tarojs/components\"\r\nimport { navigateBack } from \"@tarojs/taro\"\r\nimport classNames from \"classnames\"\r\nimport { ReactNode } from \"react\"\r\nimport { demoPrefixClassname } from \"../styles/prefix\"\r\nimport \"./page.scss\"\r\nimport Target from \"./target\"\r\n\r\ninterface PageProps {\r\n  className?: string\r\n  title?: string\r\n  children: ReactNode\r\n}\r\n\r\nexport default function Page(props: PageProps) {\r\n  const { className, title, children } = props\r\n\r\n  return (\r\n    <View className={classNames(demoPrefixClassname(\"page\"), className)}>\r\n      <Target type=\"h5\">\r\n        <View className={demoPrefixClassname(\"page__nav\")}>\r\n          <ArrowLeft\r\n            className={demoPrefixClassname(\"page__nav__back\")}\r\n            onClick={() => navigateBack()}\r\n          />\r\n          <View className={demoPrefixClassname(\"page__nav__title\")}>{title} </View>\r\n        </View>\r\n      </Target>\r\n      <View className={demoPrefixClassname(\"page__content\")}>{children}</View>\r\n    </View>\r\n  )\r\n}\r\n","import { View } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport { ReactNode } from \"react\"\r\nimport { demoPrefixClassname } from \"../styles/prefix\"\r\nimport \"./block.scss\"\r\n\r\ntype BlockVariant = \"card\"\r\n\r\ninterface BlockProps {\r\n  className?: string\r\n  variant?: BlockVariant\r\n  title?: ReactNode\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function Block(props: BlockProps) {\r\n  const { className, variant, title, children } = props\r\n  return (\r\n    <View className={classNames(demoPrefixClassname(\"block\"), className)}>\r\n      {title && <View className={demoPrefixClassname(\"block__title\")} children={title} />}\r\n      <View\r\n        className={classNames({\r\n          [demoPrefixClassname(\"block__content\")]: variant !== \"card\",\r\n          [demoPrefixClassname(\"block__card\")]: variant === \"card\",\r\n        })}\r\n      >\r\n        {children}\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n","import { createVanIconComponent } from \"./van\"\r\n\r\nconst ArrowRight = createVanIconComponent(\"arrow\")\r\nexport default ArrowRight\r\n","import * as React from \"react\"\r\nimport { isValidElement, ReactElement, ReactNode, useMemo, useState } from \"react\"\r\nimport { CSSTransition } from \"react-transition-group\"\r\nimport { EnterHandler, ExitHandler } from \"react-transition-group/Transition\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\nexport enum TransitionName {\r\n  Fade = \"fade\",\r\n  SlideUp = \"slide-up\",\r\n  SlideDown = \"slide-down\",\r\n  SlideLeft = \"slide-left\",\r\n  SlideRight = \"slide-right\",\r\n}\r\n\r\nconst TRANSITION_PRESETS: string[] = [\r\n  TransitionName.Fade,\r\n  TransitionName.SlideUp,\r\n  TransitionName.SlideDown,\r\n  TransitionName.SlideLeft,\r\n  TransitionName.SlideRight,\r\n]\r\n\r\nfunction isTransitionPreset(name?: string) {\r\n  return name && TRANSITION_PRESETS.includes(name)\r\n}\r\n\r\nfunction useElementStyle(children?: ReactNode) {\r\n  return useMemo(() => {\r\n    if (!isValidElement(children)) {\r\n      return {}\r\n    }\r\n    const element = children as ReactElement\r\n    const { style } = element.props\r\n    return style ?? {}\r\n  }, [children])\r\n}\r\n\r\ninterface TransitionProps {\r\n  name?: TransitionName | string\r\n  in?: boolean\r\n  appear?: boolean\r\n  mountOnEnter?: boolean\r\n  unmountOnExit?: boolean\r\n  timeout?: number | { appear?: number; enter?: number; exit?: number }\r\n  children?: ReactNode\r\n  onEnter?: EnterHandler<HTMLElement>\r\n  onEntering?: EnterHandler<HTMLElement>\r\n  onEntered?: EnterHandler<HTMLElement>\r\n  onExit?: ExitHandler<HTMLElement>\r\n  onExiting?: ExitHandler<HTMLElement>\r\n  onExited?: ExitHandler<HTMLElement>\r\n}\r\n\r\nexport default function Transition(props: TransitionProps) {\r\n  const {\r\n    name,\r\n    in: inProp = false,\r\n    appear = false,\r\n    mountOnEnter = false,\r\n    unmountOnExit,\r\n    timeout = 300,\r\n    children: childrenProp,\r\n    onEnter,\r\n    onEntering,\r\n    onEntered,\r\n    onExit,\r\n    onExiting,\r\n    onExited,\r\n  } = props\r\n  const children = useMemo(() => childrenProp, [childrenProp])\r\n  const childrenStyle = useElementStyle(children)\r\n  const transactionName = isTransitionPreset(name) ? prefixClassname(`transition-${name}`) : name\r\n  const [enter, setEnter] = useState(false)\r\n  const [exited, setExited] = useState(false)\r\n\r\n  return (\r\n    <CSSTransition\r\n      in={inProp}\r\n      mountOnEnter={mountOnEnter}\r\n      unmountOnExit={unmountOnExit}\r\n      timeout={timeout}\r\n      appear={appear}\r\n      classNames={transactionName}\r\n      style={{\r\n        ...childrenStyle,\r\n        display: enter && !exited ? \"\" : \"none\",\r\n      }}\r\n      children={children}\r\n      onEnter={(node, isAppearing) => {\r\n        setEnter(true)\r\n        setExited(false)\r\n        // @ts-ignore\r\n        onEnter?.(node, isAppearing)\r\n      }}\r\n      onEntering={onEntering}\r\n      onEntered={onEntered}\r\n      onExit={onExit}\r\n      onExiting={onExiting}\r\n      onExited={(node) => {\r\n        setEnter(false)\r\n        setExited(true)\r\n        // @ts-ignore\r\n        onExited?.(node)\r\n      }}\r\n    />\r\n  )\r\n}\r\n","import \"../../styles/style\"\r\nimport \"../index.scss\"\r\n","import { createContext } from \"react\"\r\n\r\ninterface CellGroupContextValue {\r\n  clickable?: boolean\r\n}\r\n\r\nconst CellGroupContext = createContext<CellGroupContextValue>({})\r\n\r\nexport default CellGroupContext\r\n","import { cloneIconElement, isIconElement } from \"@taroify/icons/utils\"\r\nimport { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode, useContext } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport CellGroupContext from \"./cell-group.context\"\r\nimport { CellAlign, CellSize } from \"./cell.shared\"\r\n\r\nexport interface CellBaseProps extends ViewProps {\r\n  bordered?: boolean\r\n  required?: boolean\r\n  clickable?: boolean\r\n  size?: CellSize\r\n  align?: CellAlign\r\n  icon?: ReactNode\r\n  rightIcon?: ReactNode\r\n  children?: ReactNode\r\n}\r\n\r\nfunction CellBase(props: CellBaseProps) {\r\n  const {\r\n    className,\r\n    size = \"medium\",\r\n    align,\r\n    clickable: clickableProp = false,\r\n    required = false,\r\n    bordered = true,\r\n    icon,\r\n    rightIcon,\r\n    children,\r\n    ...restProps\r\n  } = props\r\n\r\n  const { clickable } = useContext(CellGroupContext)\r\n\r\n  return (\r\n    <View\r\n      className={classNames(\r\n        prefixClassname(\"cell\"),\r\n        {\r\n          [prefixClassname(\"cell--start\")]: align === \"start\",\r\n          [prefixClassname(\"cell--center\")]: align === \"center\",\r\n          [prefixClassname(\"cell--end\")]: align === \"end\",\r\n          [prefixClassname(\"cell--large\")]: size === \"large\",\r\n          [prefixClassname(\"cell--clickable\")]: clickableProp || clickable,\r\n          [prefixClassname(\"cell--required\")]: required,\r\n          [prefixClassname(\"cell--borderless\")]: !bordered,\r\n        },\r\n        className,\r\n      )}\r\n      {...restProps}\r\n    >\r\n      {icon && isIconElement(icon)\r\n        ? cloneIconElement(icon, { className: prefixClassname(\"cell__icon\") })\r\n        : icon}\r\n      {children}\r\n      {rightIcon && isIconElement(rightIcon)\r\n        ? cloneIconElement(rightIcon, { className: prefixClassname(\"cell__right-icon\") })\r\n        : rightIcon}\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default CellBase\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\ninterface CellBriefProps extends ViewProps {\r\n  children: ReactNode\r\n}\r\n\r\nfunction CellBrief(props: CellBriefProps) {\r\n  const { className, ...restProps } = props\r\n  return <View className={classNames(prefixClassname(\"cell__brief\"), className)} {...restProps} />\r\n}\r\n\r\nexport default CellBrief\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\ninterface CellTitleProps extends ViewProps {\r\n  children?: ReactNode\r\n}\r\n\r\nfunction CellTitle(props: CellTitleProps) {\r\n  const { className, ...restProps } = props\r\n  return <View className={classNames(prefixClassname(\"cell__title\"), className)} {...restProps} />\r\n}\r\n\r\nexport default CellTitle\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\ninterface CellValueProps extends ViewProps {\r\n  alone?: boolean\r\n  children: ReactNode\r\n}\r\n\r\nfunction CellValue(props: CellValueProps) {\r\n  const { className, alone, ...restProps } = props\r\n  return (\r\n    <View\r\n      className={classNames(\r\n        prefixClassname(\"cell__value\"),\r\n        {\r\n          [prefixClassname(\"cell__value--alone\")]: alone,\r\n        },\r\n        className,\r\n      )}\r\n      {...restProps}\r\n    />\r\n  )\r\n}\r\n\r\nexport default CellValue\r\n","import { ViewProps } from \"@tarojs/components/types/View\"\nimport * as React from \"react\"\nimport { ReactNode } from \"react\"\nimport CellBase from \"./cell-base\"\nimport CellBrief from \"./cell-brief\"\nimport CellTitle from \"./cell-title\"\nimport CellValue from \"./cell-value\"\nimport { CellAlign, CellSize } from \"./cell.shared\"\n\nexport interface CellProps extends ViewProps {\n  size?: CellSize\n  align?: CellAlign\n  title?: ReactNode\n  brief?: ReactNode\n  icon?: ReactNode\n  rightIcon?: ReactNode\n  bordered?: boolean\n  clickable?: boolean\n  children?: ReactNode\n}\n\nfunction Cell(props: CellProps) {\n  const { title, brief, children, ...restProps } = props\n  return (\n    <CellBase {...restProps}>\n      {title && (\n        <CellTitle>\n          {title}\n          {brief && <CellBrief children={brief} />}\n        </CellTitle>\n      )}\n      <CellValue alone={!title} children={children} />\n    </CellBase>\n  )\n}\n\nexport default Cell\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport CellGroupContext from \"./cell-group.context\"\r\n\r\ninterface CellGroupProps extends ViewProps {\r\n  title?: ReactNode\r\n  clickable?: boolean\r\n  inset?: boolean\r\n  bordered?: boolean\r\n  children?: ReactNode\r\n}\r\n\r\nexport function CellGroup(props: CellGroupProps) {\r\n  const { title, clickable = false, inset = false, bordered = true, children, ...restProps } = props\r\n  return (\r\n    <CellGroupContext.Provider\r\n      value={{\r\n        clickable,\r\n      }}\r\n    >\r\n      <View\r\n        className={classNames(prefixClassname(\"cell-group\"), {\r\n          [prefixClassname(\"cell-group--inset\")]: inset,\r\n        })}\r\n        {...restProps}\r\n      >\r\n        {title && (\r\n          <View\r\n            className={classNames(prefixClassname(\"cell-group__title\"), {\r\n              [prefixClassname(\"cell-group__title--inset\")]: inset,\r\n            })}\r\n            children={title}\r\n          />\r\n        )}\r\n        <View\r\n          className={classNames(prefixClassname(\"cell-group\"), {\r\n            [prefixClassname(\"hairline--top-bottom\")]: bordered,\r\n          })}\r\n          children={children}\r\n        />\r\n      </View>\r\n    </CellGroupContext.Provider>\r\n  )\r\n}\r\n\r\nexport default CellGroup\r\n","import CellElement, { CellProps } from \"./cell\"\r\nimport CellGroup from \"./cell-group\"\r\n\r\nexport type { CellAlign, CellSize } from \"./cell.shared\"\r\nexport { default as CellBase } from \"./cell-base\"\r\nexport { default as CellTitle } from \"./cell-title\"\r\nexport { default as CellValue } from \"./cell-value\"\r\nexport type { CellProps } from \"./cell\"\r\n\r\ninterface CellInterface {\r\n  (props: CellProps): JSX.Element\r\n\r\n  Group: typeof CellGroup\r\n}\r\n\r\nconst Cell = CellElement as CellInterface\r\nCell.Group = CellGroup\r\n\r\nexport default Cell\r\n","import \"../../styles/style\"\r\nimport \"../index.scss\"\r\n","import { Cell, Transition } from \"@taroify/core\"\r\nimport { TransitionName } from \"@taroify/core/transition\"\r\nimport ArrowRight from \"@taroify/icons/ArrowRight\"\r\nimport { View } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport { useState } from \"react\"\r\nimport Block from \"../../../components/block\"\r\nimport Page from \"../../../components/page\"\r\nimport \"./index.scss\"\r\n\r\nexport default function TransitionDemo() {\r\n  const [name, setName] = useState<TransitionName>(TransitionName.Fade)\r\n  const [state, setState] = useState(false)\r\n\r\n  function toggleTransition(newName: TransitionName) {\r\n    setName(newName)\r\n    setState(!state)\r\n  }\r\n\r\n  return (\r\n    <Page title=\"内置样式\" className=\"style-demo\">\r\n      <Block variant=\"card\" title=\"文字省略\">\r\n        <View className={classNames(\"taroify-ellipsis\", \"ellipsis-text\")}>\r\n          这是一段最多显示一行的文字，后面的内容会省略省略省略\r\n        </View>\r\n        <View className={classNames(\"taroify-ellipsis--l2\", \"ellipsis-text\")}>\r\n          这是一段最多显示两行的文字，后面的内容会省略。这是一段最多显示两行的文字，后面的内容会省略。这是一段最多显示两行的文字，后面的内容会省略。\r\n        </View>\r\n      </Block>\r\n      <Block variant=\"card\" title=\"1px 边框\">\r\n        <View className={classNames(\"taroify-hairline--top\", \"hairline-line\")} />\r\n      </Block>\r\n      <Block variant=\"card\" title=\"动画\">\r\n        <Cell\r\n          clickable\r\n          title=\"Fade\"\r\n          rightIcon={<ArrowRight />}\r\n          onClick={() => toggleTransition(TransitionName.Fade)}\r\n        />\r\n        <Cell\r\n          clickable\r\n          title=\"Slide Up\"\r\n          rightIcon={<ArrowRight />}\r\n          onClick={() => toggleTransition(TransitionName.SlideUp)}\r\n        />\r\n        <Cell\r\n          clickable\r\n          title=\"Slide Down\"\r\n          rightIcon={<ArrowRight />}\r\n          onClick={() => toggleTransition(TransitionName.SlideDown)}\r\n        />\r\n        <Cell\r\n          clickable\r\n          title=\"Slide Left\"\r\n          rightIcon={<ArrowRight />}\r\n          onClick={() => toggleTransition(TransitionName.SlideLeft)}\r\n        />\r\n        <Cell\r\n          clickable\r\n          title=\"Slide Right\"\r\n          rightIcon={<ArrowRight />}\r\n          onClick={() => toggleTransition(TransitionName.SlideRight)}\r\n        />\r\n        <Transition in={state} name={name} onEntered={() => setState(false)}>\r\n          <View className=\"animate-block\" />\r\n        </Transition>\r\n      </Block>\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}