{"version":3,"sources":["webpack:///../../../../packages/icons/src/utils/index.ts","webpack:///./src/components/block.tsx","webpack:///../../../../packages/core/src/cell/cell-group.context.ts","webpack:///../../../../packages/core/src/cell/cell-base.tsx","webpack:///../../../../packages/core/src/cell/cell-brief.tsx","webpack:///../../../../packages/core/src/cell/cell-title.tsx","webpack:///../../../../packages/core/src/cell/cell-value.tsx","webpack:///../../../../packages/core/src/cell/cell.tsx","webpack:///../../../../packages/core/src/cell/cell-group.tsx","webpack:///../../../../packages/core/src/cell/index.ts","webpack:///../../../../packages/core/src/cell/style/index.ts","webpack:///../../../../packages/core/src/tag/tag.tsx","webpack:///./src/pages/display/tag/index.tsx"],"names":["isValidElement","element","isIconElement","cloneElement","node","className","oldProps","props","newProps","classNames","Block","variant","title","children","demoPrefixClassname","createContext","CellBase","size","clickable","clickableProp","required","bordered","useContext","prefixClassname","align","icon","cloneIconElement","rightIcon","CellBrief","CellTitle","CellValue","alone","inset","CellGroupContext","value","Cell","brief","Tag","color","shape","closeIcon","React","closeable","onClick","onClose","CloseTag","useState","visible","setVisible","TagDemo","style","backgroundColor"],"mappings":"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","file":"chunk/75.f971fdc7.js","sourcesContent":["import classNames from \"classnames\"\nimport * as _ from \"lodash\"\nimport { cloneElement, isValidElement, ReactElement, ReactNode } from \"react\"\nimport { ICON_TYPE, IconProps } from \"../shared\"\n\nexport function isIconElement(node?: ReactNode): boolean {\n  // Is`t not ReactElement\n  if (!isValidElement(node)) {\n    return false\n  }\n  const element = node as ReactElement\n  return _.hasIn(element.type, ICON_TYPE)\n}\n\nexport function cloneIconElement(node: ReactNode, props: IconProps): ReactNode {\n  if (!isIconElement(node)) {\n    return isValidElement(node) ? cloneElement(node, props) : node\n  }\n  const { className, ...restProps } = props\n  const element = node as ReactElement\n  const { props: oldProps } = element\n  const newProps: IconProps = {\n    ...oldProps,\n    className: classNames(oldProps.className, className),\n    ...restProps,\n  }\n  return cloneElement(element, newProps)\n}\n","import { View } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport { ReactNode } from \"react\"\r\nimport { demoPrefixClassname } from \"../styles/prefix\"\r\nimport \"./block.scss\"\r\n\r\ntype BlockVariant = \"card\"\r\n\r\ninterface BlockProps {\r\n  className?: string\r\n  variant?: BlockVariant\r\n  title?: ReactNode\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function Block(props: BlockProps) {\r\n  const { className, variant, title, children } = props\r\n  return (\r\n    <View className={classNames(demoPrefixClassname(\"block\"), className)}>\r\n      {title && <View className={demoPrefixClassname(\"block__title\")} children={title} />}\r\n      <View\r\n        className={classNames({\r\n          [demoPrefixClassname(\"block__content\")]: variant !== \"card\",\r\n          [demoPrefixClassname(\"block__card\")]: variant === \"card\",\r\n        })}\r\n      >\r\n        {children}\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n","import { createContext } from \"react\"\r\n\r\ninterface CellGroupContextValue {\r\n  clickable?: boolean\r\n}\r\n\r\nconst CellGroupContext = createContext<CellGroupContextValue>({})\r\n\r\nexport default CellGroupContext\r\n","import { cloneIconElement, isIconElement } from \"@taroify/icons/utils\"\r\nimport { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode, useContext } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport CellGroupContext from \"./cell-group.context\"\r\nimport { CellAlign, CellSize } from \"./cell.shared\"\r\n\r\nexport interface CellBaseProps extends ViewProps {\r\n  bordered?: boolean\r\n  required?: boolean\r\n  clickable?: boolean\r\n  size?: CellSize\r\n  align?: CellAlign\r\n  icon?: ReactNode\r\n  rightIcon?: ReactNode\r\n  children?: ReactNode\r\n}\r\n\r\nfunction CellBase(props: CellBaseProps) {\r\n  const {\r\n    className,\r\n    size = \"medium\",\r\n    align,\r\n    clickable: clickableProp = false,\r\n    required = false,\r\n    bordered = true,\r\n    icon,\r\n    rightIcon,\r\n    children,\r\n    ...restProps\r\n  } = props\r\n\r\n  const { clickable } = useContext(CellGroupContext)\r\n\r\n  return (\r\n    <View\r\n      className={classNames(\r\n        prefixClassname(\"cell\"),\r\n        {\r\n          [prefixClassname(\"cell--start\")]: align === \"start\",\r\n          [prefixClassname(\"cell--center\")]: align === \"center\",\r\n          [prefixClassname(\"cell--end\")]: align === \"end\",\r\n          [prefixClassname(\"cell--large\")]: size === \"large\",\r\n          [prefixClassname(\"cell--clickable\")]: clickableProp || clickable,\r\n          [prefixClassname(\"cell--required\")]: required,\r\n          [prefixClassname(\"cell--borderless\")]: !bordered,\r\n        },\r\n        className,\r\n      )}\r\n      {...restProps}\r\n    >\r\n      {icon && isIconElement(icon)\r\n        ? cloneIconElement(icon, { className: prefixClassname(\"cell__icon\") })\r\n        : icon}\r\n      {children}\r\n      {rightIcon && isIconElement(rightIcon)\r\n        ? cloneIconElement(rightIcon, { className: prefixClassname(\"cell__right-icon\") })\r\n        : rightIcon}\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default CellBase\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\ninterface CellBriefProps extends ViewProps {\r\n  children: ReactNode\r\n}\r\n\r\nfunction CellBrief(props: CellBriefProps) {\r\n  const { className, ...restProps } = props\r\n  return <View className={classNames(prefixClassname(\"cell__brief\"), className)} {...restProps} />\r\n}\r\n\r\nexport default CellBrief\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\ninterface CellTitleProps extends ViewProps {\r\n  children?: ReactNode\r\n}\r\n\r\nfunction CellTitle(props: CellTitleProps) {\r\n  const { className, ...restProps } = props\r\n  return <View className={classNames(prefixClassname(\"cell__title\"), className)} {...restProps} />\r\n}\r\n\r\nexport default CellTitle\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\ninterface CellValueProps extends ViewProps {\r\n  alone?: boolean\r\n  children: ReactNode\r\n}\r\n\r\nfunction CellValue(props: CellValueProps) {\r\n  const { className, alone, ...restProps } = props\r\n  return (\r\n    <View\r\n      className={classNames(\r\n        prefixClassname(\"cell__value\"),\r\n        {\r\n          [prefixClassname(\"cell__value--alone\")]: alone,\r\n        },\r\n        className,\r\n      )}\r\n      {...restProps}\r\n    />\r\n  )\r\n}\r\n\r\nexport default CellValue\r\n","import { ViewProps } from \"@tarojs/components/types/View\"\nimport * as React from \"react\"\nimport { ReactNode } from \"react\"\nimport CellBase from \"./cell-base\"\nimport CellBrief from \"./cell-brief\"\nimport CellTitle from \"./cell-title\"\nimport CellValue from \"./cell-value\"\nimport { CellAlign, CellSize } from \"./cell.shared\"\n\nexport interface CellProps extends ViewProps {\n  size?: CellSize\n  align?: CellAlign\n  title?: ReactNode\n  brief?: ReactNode\n  icon?: ReactNode\n  rightIcon?: ReactNode\n  bordered?: boolean\n  clickable?: boolean\n  children?: ReactNode\n}\n\nfunction Cell(props: CellProps) {\n  const { title, brief, children, ...restProps } = props\n  return (\n    <CellBase {...restProps}>\n      {title && (\n        <CellTitle>\n          {title}\n          {brief && <CellBrief children={brief} />}\n        </CellTitle>\n      )}\n      <CellValue alone={!title} children={children} />\n    </CellBase>\n  )\n}\n\nexport default Cell\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport CellGroupContext from \"./cell-group.context\"\r\n\r\ninterface CellGroupProps extends ViewProps {\r\n  title?: ReactNode\r\n  clickable?: boolean\r\n  inset?: boolean\r\n  bordered?: boolean\r\n  children?: ReactNode\r\n}\r\n\r\nexport function CellGroup(props: CellGroupProps) {\r\n  const { title, clickable = false, inset = false, bordered = true, children, ...restProps } = props\r\n  return (\r\n    <CellGroupContext.Provider\r\n      value={{\r\n        clickable,\r\n      }}\r\n    >\r\n      <View\r\n        className={classNames(prefixClassname(\"cell-group\"), {\r\n          [prefixClassname(\"cell-group--inset\")]: inset,\r\n        })}\r\n        {...restProps}\r\n      >\r\n        {title && (\r\n          <View\r\n            className={classNames(prefixClassname(\"cell-group__title\"), {\r\n              [prefixClassname(\"cell-group__title--inset\")]: inset,\r\n            })}\r\n            children={title}\r\n          />\r\n        )}\r\n        <View\r\n          className={classNames(prefixClassname(\"cell-group\"), {\r\n            [prefixClassname(\"hairline--top-bottom\")]: bordered,\r\n          })}\r\n          children={children}\r\n        />\r\n      </View>\r\n    </CellGroupContext.Provider>\r\n  )\r\n}\r\n\r\nexport default CellGroup\r\n","import CellElement, { CellProps } from \"./cell\"\r\nimport CellGroup from \"./cell-group\"\r\n\r\nexport type { CellAlign, CellSize } from \"./cell.shared\"\r\nexport { default as CellBase } from \"./cell-base\"\r\nexport { default as CellTitle } from \"./cell-title\"\r\nexport { default as CellValue } from \"./cell-value\"\r\nexport type { CellProps } from \"./cell\"\r\n\r\ninterface CellInterface {\r\n  (props: CellProps): JSX.Element\r\n\r\n  Group: typeof CellGroup\r\n}\r\n\r\nconst Cell = CellElement as CellInterface\r\nCell.Group = CellGroup\r\n\r\nexport default Cell\r\n","import \"../../styles/style\"\r\nimport \"../index.scss\"\r\n","import { Cross } from \"@taroify/icons\"\r\nimport { cloneIconElement } from \"@taroify/icons/utils\"\r\nimport { ITouchEvent, View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\ntype TagVariant = \"contained\" | \"outlined\"\r\n\r\ntype TagColor = \"default\" | \"primary\" | \"info\" | \"success\" | \"warning\" | \"danger\"\r\n\r\ntype TagSize = \"small\" | \"medium\" | \"large\"\r\n\r\ntype TagShape = \"square\" | \"rounded\" | \"roundedRight\" | \"roundedLeft\"\r\n\r\ninterface TagProps extends ViewProps {\r\n  variant?: TagVariant\r\n  size?: TagSize\r\n  color?: TagColor\r\n  shape?: TagShape\r\n  closeIcon?: ReactNode\r\n  closeable?: boolean\r\n  children?: ReactNode\r\n\r\n  onClose?(event: ITouchEvent): void\r\n}\r\n\r\nfunction Tag(props: TagProps) {\r\n  const {\r\n    className,\r\n    variant = \"contained\",\r\n    size = \"small\",\r\n    color = \"default\",\r\n    shape = \"square\",\r\n    closeable,\r\n    closeIcon = <Cross />,\r\n    onClose,\r\n    children,\r\n    ...restProps\r\n  } = props\r\n\r\n  return (\r\n    <View\r\n      className={classNames(\r\n        prefixClassname(\"tag\"),\r\n        {\r\n          [prefixClassname(\"tag--outlined\")]: variant === \"outlined\",\r\n          // Set size styles\r\n          [prefixClassname(\"tag--medium\")]: size === \"medium\",\r\n          [prefixClassname(\"tag--large\")]: size === \"large\",\r\n          // Set color styles\r\n          [prefixClassname(\"tag--default\")]: color === \"default\",\r\n          [prefixClassname(\"tag--primary\")]: color === \"primary\",\r\n          [prefixClassname(\"tag--info\")]: color === \"info\",\r\n          [prefixClassname(\"tag--success\")]: color === \"success\",\r\n          [prefixClassname(\"tag--warning\")]: color === \"warning\",\r\n          [prefixClassname(\"tag--danger\")]: color === \"danger\",\r\n          // Set shape styles\r\n          [prefixClassname(\"tag--rounded\")]: shape === \"rounded\",\r\n          [prefixClassname(\"tag--rounded-right\")]: shape === \"roundedRight\",\r\n          [prefixClassname(\"tag--rounded-left\")]: shape === \"roundedLeft\",\r\n        },\r\n        className,\r\n      )}\r\n      {...restProps}\r\n    >\r\n      {children}\r\n      {closeable &&\r\n        cloneIconElement(closeIcon, {\r\n          className: prefixClassname(\"tag__close\"),\r\n          onClick: onClose,\r\n        })}\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default Tag\r\n","import { Cell, Tag } from \"@taroify/core\"\r\nimport { useState } from \"react\"\r\nimport Block from \"../../../components/block\"\r\nimport Page from \"../../../components/page\"\r\nimport \"./index.scss\"\r\n\r\nfunction CloseTag() {\r\n  const [visible, setVisible] = useState(true)\r\n  return (\r\n    <>\r\n      {visible && (\r\n        <Tag color=\"primary\" size=\"medium\" closeable onClose={() => setVisible(false)}>\r\n          标签\r\n        </Tag>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default function TagDemo() {\r\n  return (\r\n    <Page title=\"Tag 标签\" className=\"tag-demo\">\r\n      <Block variant=\"card\" title=\"基础用法\">\r\n        <Cell title=\"颜色 default\">\r\n          <Tag>标签</Tag>\r\n        </Cell>\r\n        <Cell title=\"颜色 primary\">\r\n          <Tag color=\"primary\">标签</Tag>\r\n        </Cell>\r\n        <Cell title=\"颜色 info\">\r\n          <Tag color=\"info\">标签</Tag>\r\n        </Cell>\r\n        <Cell title=\"颜色 success\">\r\n          <Tag color=\"success\">标签</Tag>\r\n        </Cell>\r\n        <Cell title=\"颜色 warning\">\r\n          <Tag color=\"warning\">标签</Tag>\r\n        </Cell>\r\n        <Cell title=\"颜色 danger\">\r\n          <Tag color=\"danger\">标签</Tag>\r\n        </Cell>\r\n      </Block>\r\n      <Block variant=\"card\" title=\"样式风格\">\r\n        <Cell title=\"空心样式\">\r\n          <Tag color=\"primary\" variant=\"outlined\" children=\"标签\" />\r\n        </Cell>\r\n        <Cell title=\"圆角样式\">\r\n          <Tag color=\"primary\" shape=\"round\" children=\"标签\" />\r\n        </Cell>\r\n        <Cell title=\"右侧圆角样式\">\r\n          <Tag color=\"primary\" shape=\"roundRight\" children=\"标签\" />\r\n        </Cell>\r\n        <Cell title=\"左侧圆角样式\">\r\n          <Tag color=\"primary\" shape=\"roundLeft\" children=\"标签\" />\r\n        </Cell>\r\n        <Cell title=\"可关闭标签\">\r\n          <CloseTag />\r\n        </Cell>\r\n      </Block>\r\n      <Block variant=\"card\" title=\"标签大小\">\r\n        <Cell title=\"小号标签\">\r\n          <Tag color=\"primary\" children=\"标签\" />\r\n        </Cell>\r\n        <Cell title=\"中号标签\">\r\n          <Tag color=\"primary\" size=\"medium\" children=\"标签\" />\r\n        </Cell>\r\n        <Cell title=\"大号标签\">\r\n          <Tag color=\"primary\" size=\"large\" children=\"标签\" />\r\n        </Cell>\r\n      </Block>\r\n      <Block variant=\"card\" title=\"自定义颜色\">\r\n        <Cell title=\"背景颜色\">\r\n          <Tag style={{ backgroundColor: \"#7232dd\" }} children=\"标签\" />\r\n        </Cell>\r\n        <Cell title=\"文字颜色\">\r\n          <Tag style={{ backgroundColor: \"#ffe1e1\", color: \"#ad0000\" }} children=\"标签\" />\r\n        </Cell>\r\n        <Cell title=\"空心颜色\">\r\n          <Tag style={{ color: \"#7232dd\" }} variant=\"outlined\" children=\"标签\" />\r\n        </Cell>\r\n      </Block>\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}