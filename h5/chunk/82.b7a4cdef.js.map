{"version":3,"sources":["webpack:///./src/components/block.tsx","webpack:///../icons/src/utils/index.ts","webpack:///../core/src/badge/style/index.ts","webpack:///../core/src/badge/badge.tsx","webpack:///../core/src/badge/use-badge.tsx","webpack:///./src/pages/display/badge/index.tsx"],"names":["Block","props","className","variant","title","children","classNames","demoPrefixClassname","isIconElement","node","isValidElement","element","type","ICON_TYPE","cloneIconElement","cloneElement","restProps","oldProps","newProps","Badge","contentProp","content","max","dot","position","isIcon","useMemo","hasChildren","undefined","noneChildren","prefixClassname","elementTypeOf","useBadge","badge","BadgeDemo"],"mappings":"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","file":"chunk/82.b7a4cdef.js","sourcesContent":["import { View } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { demoPrefixClassname } from \"../styles/prefix\"\r\nimport \"./block.scss\"\r\n\r\ntype BlockVariant = \"card\"\r\n\r\ninterface BlockProps {\r\n  className?: string\r\n  variant?: BlockVariant\r\n  title?: ReactNode\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function Block(props: BlockProps) {\r\n  const { className, variant, title, children } = props\r\n  return (\r\n    <View className={classNames(demoPrefixClassname(\"block\"), className)}>\r\n      {title && <View className={demoPrefixClassname(\"block__title\")} children={title} />}\r\n      <View\r\n        className={classNames({\r\n          [demoPrefixClassname(\"block__content\")]: variant !== \"card\",\r\n          [demoPrefixClassname(\"block__card\")]: variant === \"card\",\r\n        })}\r\n      >\r\n        {children}\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n","import classNames from \"classnames\"\r\nimport * as _ from \"lodash\"\r\nimport { cloneElement, isValidElement, ReactElement, ReactNode } from \"react\"\r\nimport { ICON_TYPE, IconProps } from \"../shared\"\r\n\r\nexport function isIconElement(node?: ReactNode): boolean {\r\n  // Is`t not ReactElement\r\n  if (!isValidElement(node)) {\r\n    return false\r\n  }\r\n  const element = node as ReactElement\r\n  return _.hasIn(element.type, ICON_TYPE)\r\n}\r\n\r\nexport function cloneIconElement(node: ReactNode, props: IconProps): ReactNode {\r\n  if (!isIconElement(node)) {\r\n    return isValidElement(node) ? cloneElement(node, props) : node\r\n  }\r\n  const { className, ...restProps } = props\r\n  const element = node as ReactElement\r\n  const { props: oldProps } = element\r\n  const newProps: IconProps = {\r\n    ...oldProps,\r\n    className: classNames(oldProps.className, className),\r\n    ...restProps,\r\n  }\r\n  return cloneElement(element, newProps)\r\n}\r\n","import \"../../styles/style\"\r\nimport \"../index.scss\"\r\n","import { cloneIconElement, isIconElement } from \"@taroify/icons/utils\"\nimport { View } from \"@tarojs/components\"\nimport classNames from \"classnames\"\nimport * as _ from \"lodash\"\nimport * as React from \"react\"\nimport { ReactElement, ReactNode, useMemo } from \"react\"\nimport { prefixClassname } from \"../styles\"\n\nexport type BadgePosition = \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"\n\nexport interface BadgeProps {\n  className?: string\n  content?: ReactNode\n  dot?: boolean\n  max?: number\n  position?: BadgePosition\n  children?: ReactNode\n}\n\nfunction Badge(props: BadgeProps): JSX.Element {\n  const { className, content: contentProp, max, dot, position = \"top-right\", children } = props\n  const isIcon = useMemo(() => isIconElement(children), [children])\n  const hasChildren = children !== undefined\n  const noneChildren = children === undefined\n\n  const content = useMemo(\n    () =>\n      _.isNumber(contentProp)\n        ? _.toString(_.gt(contentProp, max) ? `${max}+` : contentProp)\n        : contentProp,\n    [contentProp, max],\n  )\n\n  return cloneIconElement(isIcon ? children : <View />, {\n    className: classNames(\n      {\n        [prefixClassname(\"badge__wrapper\")]: hasChildren,\n        [prefixClassname(\"badge\")]: noneChildren,\n        [prefixClassname(\"badge--dot\")]: noneChildren && dot,\n        [prefixClassname(\"badge--top-left\")]: noneChildren && position === \"top-left\",\n        [prefixClassname(\"badge--top-right\")]: noneChildren && position === \"top-right\",\n        [prefixClassname(\"badge--bottom-left\")]: noneChildren && position === \"bottom-left\",\n        [prefixClassname(\"badge--bottom-right\")]: noneChildren && position === \"bottom-right\",\n      },\n      className,\n    ),\n    children: (\n      <>\n        {!isIcon && children}\n        {noneChildren && !dot && content}\n        {hasChildren && (dot || content) && (\n          <View\n            className={classNames(\n              prefixClassname(\"badge\"),\n              {\n                [prefixClassname(\"badge--dot\")]: dot,\n                [prefixClassname(\"badge--content\")]: content,\n                [prefixClassname(\"badge--top-left\")]: position === \"top-left\",\n                [prefixClassname(\"badge--top-right\")]: position === \"top-right\",\n                [prefixClassname(\"badge--bottom-left\")]: position === \"bottom-left\",\n                [prefixClassname(\"badge--bottom-right\")]: position === \"bottom-right\",\n              },\n              prefixClassname(\"badge--fixed\"),\n            )}\n            children={!dot && content}\n          />\n        )}\n      </>\n    ),\n  }) as ReactElement\n}\n\nexport default Badge\n","import * as _ from \"lodash\"\r\nimport * as React from \"react\"\r\nimport { cloneElement, isValidElement, ReactElement, ReactNode } from \"react\"\r\nimport Badge, { BadgeProps } from \"./badge\"\r\n\r\ninterface BadgeChildren {\r\n  children?: ReactNode\r\n}\r\n\r\nfunction elementTypeOf(node: ReactNode, type: any) {\r\n  return isValidElement(node) && (node as ReactElement).type === type\r\n}\r\n\r\nexport default function useBadge(badge: ReactNode, props: BadgeProps = {}) {\r\n  if (_.isBoolean(badge) && badge) {\r\n    return ({ children }: BadgeChildren) => <Badge {...props} dot children={children} />\r\n  }\r\n\r\n  if (_.isNumber(badge) || _.isString(badge)) {\r\n    return ({ children }: BadgeChildren) => <Badge {...props} content={badge} children={children} />\r\n  }\r\n\r\n  if (elementTypeOf(badge, Badge)) {\r\n    return ({ children }: BadgeChildren) =>\r\n      cloneElement(badge as ReactElement, {\r\n        ...props,\r\n        children,\r\n      })\r\n  }\r\n  return ({ children }: BadgeChildren) => <Badge {...props} children={children} />\r\n}\r\n","import { Badge } from \"@taroify/core\"\r\nimport { Cross, Down, Success } from \"@taroify/icons\"\r\nimport { View } from \"@tarojs/components\"\r\nimport * as React from \"react\"\r\nimport Block from \"../../../components/block\"\r\nimport Page from \"../../../components/page\"\r\nimport \"./index.scss\"\r\n\r\nexport default function BadgeDemo() {\r\n  return (\r\n    <Page title=\"Badge 徽标\" className=\"badge-demo\">\r\n      <Block title=\"基础用法\">\r\n        <Badge content={5}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content=\"10\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content=\"Hot\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge dot>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n      </Block>\r\n      <Block title=\"最大值\">\r\n        <Badge content={10} max={9}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={21} max={20}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={100} max={99}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n      </Block>\r\n      <Block title=\"自定义颜色\">\r\n        <Badge className=\"custom-color\" content={5}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge className=\"custom-color\" content={10}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge className=\"custom-color\" content=\"Hot\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge className=\"custom-color\" dot>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n      </Block>\r\n      <Block title=\"自定义徽标内容\">\r\n        <Badge content={<Success className=\"badge-icon\" />}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={<Cross className=\"badge-icon\" />}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={<Down className=\"badge-icon\" />}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n      </Block>\r\n      <Block title=\"自定义徽标位置\">\r\n        <Badge content={10} position=\"top-left\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={10} position=\"top-right\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={10} position=\"bottom-left\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={10} position=\"bottom-right\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n      </Block>\r\n      <Block title=\"独立展示\" className=\"independent-badges\">\r\n        <Badge content=\"20\" />\r\n        <Badge content={100} max={99} />\r\n      </Block>\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}