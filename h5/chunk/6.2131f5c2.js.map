{"version":3,"sources":["webpack:///../../../../packages/core/src/utils/format/unit.ts","webpack:///../../../../packages/icons/src/utils/index.ts","webpack:///../../../../packages/core/src/utils/validate/index.ts","webpack:///./src/components/block.tsx","webpack:///../../../../packages/core/src/loading/loading.tsx","webpack:///../../../../packages/core/src/loading/style/index.ts","webpack:///../../../../packages/core/src/button/button.context.ts","webpack:///../../../../packages/core/src/utils/children.ts","webpack:///../../../../packages/core/src/button/button-content.tsx","webpack:///../../../../packages/core/src/button/button.tsx","webpack:///../../../../packages/core/src/button/index.ts","webpack:///../../../../packages/core/src/button/style/index.ts","webpack:///../../../../packages/core/src/button-base/button-base.tsx","webpack:///../../../../packages/core/src/button-base/style/index.ts"],"names":["value","unitToPx","size","addUnitPx","width","height","convertRem","getRootFontSize","doc","document","fontSize","window","rootFontSize","parseFloat","convertPx","convertVw","convertVh","isValidElement","element","isIconElement","cloneElement","node","className","oldProps","props","newProps","classNames","displayName","Block","variant","title","children","demoPrefixClassname","SpinIcon","key","prefixClassname","LoadingSpinner","rootStyle","useMemo","style","LoadingCircular","type","direction","ButtonContext","createContext","isObjectChildren","isObjectElement","Children","toArray","ReactChildren","forEach","forEachChildren","map","mapChildren","ButtonContent","appendButtonIconClassname","icon","cloneIconElement","color","formType","loading","onClick","useButtonLoading","isElementOf","useButtonChildren","options","childrenArray","lastIndex","iconProp","index","child","onCtxClick","useContext","shape","block","e","disabled","React","Button","ButtonBase"],"mappings":"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","file":"chunk/6.2131f5c2.js","sourcesContent":["import * as _ from \"lodash\"\r\nimport { CSSProperties } from \"react\"\r\n\r\nexport function addUnitPx(value?: string | number): string {\r\n  return value === undefined ? \"\" : `${unitToPx(value)}px`\r\n}\r\n\r\nexport function getSizeStyle(originSize?: string | number): CSSProperties | undefined {\r\n  if (_.isNumber(originSize) || _.isString(originSize)) {\r\n    const size = addUnitPx(originSize)\r\n    return {\r\n      width: size,\r\n      height: size,\r\n    }\r\n  }\r\n  return {}\r\n}\r\n\r\nexport function getZIndexStyle(zIndex?: string | number) {\r\n  const style: CSSProperties = {}\r\n  if (zIndex !== undefined) {\r\n    style.zIndex = +zIndex\r\n  }\r\n  return style\r\n}\r\n\r\n// cache\r\nlet rootFontSize: number\r\n\r\nfunction getRootFontSize() {\r\n  if (!rootFontSize) {\r\n    const doc = document.documentElement\r\n    const fontSize = doc.style.fontSize || window.getComputedStyle(doc).fontSize\r\n\r\n    rootFontSize = parseFloat(fontSize)\r\n  }\r\n\r\n  return rootFontSize\r\n}\r\n\r\nfunction convertPx(value: string) {\r\n  value = value.replace(/px/g, \"\")\r\n  return +value\r\n}\r\n\r\nfunction convertRem(value: string) {\r\n  value = value.replace(/rem/g, \"\")\r\n  return +value * getRootFontSize()\r\n}\r\n\r\nfunction convertVw(value: string) {\r\n  value = value.replace(/vw/g, \"\")\r\n  return (+value * window.innerWidth) / 100\r\n}\r\n\r\nfunction convertVh(value: string) {\r\n  value = value.replace(/vh/g, \"\")\r\n  return (+value * window.innerHeight) / 100\r\n}\r\n\r\nexport function unitToPx(value: string | number): number {\r\n  if (typeof value === \"number\") {\r\n    return value\r\n  }\r\n\r\n  if (value.includes(\"px\")) {\r\n    return convertPx(value)\r\n  }\r\n  if (value.includes(\"rem\")) {\r\n    return convertRem(value)\r\n  }\r\n  if (value.includes(\"vw\")) {\r\n    return convertVw(value)\r\n  }\r\n  if (value.includes(\"vh\")) {\r\n    return convertVh(value)\r\n  }\r\n\r\n  return parseFloat(value)\r\n}\r\n","import classNames from \"classnames\"\nimport * as _ from \"lodash\"\nimport { cloneElement, isValidElement, ReactElement, ReactNode } from \"react\"\nimport { ICON_TYPE, IconProps } from \"../shared\"\n\nexport function isIconElement(node?: ReactNode): boolean {\n  // Is`t not ReactElement\n  if (!isValidElement(node)) {\n    return false\n  }\n  const element = node as ReactElement\n  return _.hasIn(element.type, ICON_TYPE)\n}\n\nexport function cloneIconElement(node: ReactNode, props: IconProps): ReactNode {\n  if (!isIconElement(node)) {\n    return isValidElement(node) ? cloneElement(node, props) : node\n  }\n  const { className, ...restProps } = props\n  const element = node as ReactElement\n  const { props: oldProps } = element\n  const newProps: IconProps = {\n    ...oldProps,\n    className: classNames(oldProps.className, className),\n    ...restProps,\n  }\n  return cloneElement(element, newProps)\n}\n","import * as _ from \"lodash\"\r\nimport { isValidElement, JSXElementConstructor, ReactElement, ReactNode } from \"react\"\r\n\r\nexport function isNoneElement(node: ReactNode) {\r\n  return _.isUndefined(node) || _.isNull(node)\r\n}\r\n\r\nexport function isTextElement(node: ReactNode) {\r\n  return _.isNumber(node) || _.isString(node)\r\n}\r\n\r\nexport function isObjectElement(node?: ReactNode) {\r\n  return !isValidElement(node) && _.isObject(node) && !_.isArray(node)\r\n}\r\n\r\nexport function isElementOf(node?: ReactNode, type?: JSXElementConstructor<any>) {\r\n  if (isValidElement(node)) {\r\n    const element = node as ReactElement\r\n    if (element.type === type) {\r\n      return true\r\n    }\r\n\r\n    const displayName = _.get(element.type, \"displayName\")\r\n    if (\r\n      _.isFunction(element.type) &&\r\n      !_.isEmpty(displayName) &&\r\n      _.endsWith(displayName, _.get(type, \"displayName\"))\r\n    ) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n","import { View } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { demoPrefixClassname } from \"../styles/prefix\"\r\nimport \"./block.scss\"\r\n\r\ntype BlockVariant = \"card\"\r\n\r\ninterface BlockProps {\r\n  className?: string\r\n  variant?: BlockVariant\r\n  title?: ReactNode\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function Block(props: BlockProps) {\r\n  const { className, variant, title, children } = props\r\n  return (\r\n    <View className={classNames(demoPrefixClassname(\"block\"), className)}>\r\n      {title && <View className={demoPrefixClassname(\"block__title\")} children={title} />}\r\n      <View\r\n        className={classNames({\r\n          [demoPrefixClassname(\"block__content\")]: variant !== \"card\",\r\n          [demoPrefixClassname(\"block__card\")]: variant === \"card\",\r\n        })}\r\n      >\r\n        {children}\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as _ from \"lodash\"\r\nimport * as React from \"react\"\r\nimport { ReactNode, useMemo } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport { addUnitPx } from \"../utils/format/unit\"\r\n\r\nconst SpinIcon = _.range(0, 12).map((key) => (\r\n  <View key={key} className={prefixClassname(\"loading__spinner__item\")} />\r\n))\r\n\r\nfunction LoadingSpinner(props: LoadingProps) {\r\n  const { size } = props\r\n  const rootStyle = useMemo(\r\n    () => ({\r\n      width: addUnitPx(size) ?? \"\",\r\n      height: addUnitPx(size) ?? \"\",\r\n    }),\r\n    [size],\r\n  )\r\n  return (\r\n    <View className={prefixClassname(\"loading__spinner\")} style={rootStyle}>\r\n      {SpinIcon}\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction LoadingCircular(props: LoadingProps) {\r\n  const { size } = props\r\n  const rootStyle = useMemo(\r\n    () => ({\r\n      width: addUnitPx(size) ?? \"\",\r\n      height: addUnitPx(size) ?? \"\",\r\n    }),\r\n    [size],\r\n  )\r\n  return <View className={prefixClassname(\"loading__circular\")} style={rootStyle} />\r\n}\r\n\r\nexport type LoadingType = \"circular\" | \"spinner\"\r\n\r\ntype LoadingDirection = \"horizontal\" | \"vertical\"\r\n\r\nexport interface LoadingProps extends ViewProps {\r\n  className?: string\r\n  size?: number | string\r\n  type?: LoadingType\r\n  direction?: LoadingDirection\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function Loading(props: LoadingProps) {\r\n  const {\r\n    className,\r\n    size,\r\n    type = \"circular\",\r\n    direction = \"horizontal\",\r\n    children,\r\n    ...restProps\r\n  } = props\r\n\r\n  return (\r\n    <View\r\n      className={classNames(\r\n        prefixClassname(\"loading\"),\r\n        prefixClassname(`loading--${direction}`),\r\n        prefixClassname(`loading--${type}`),\r\n        className,\r\n      )}\r\n      {...restProps}\r\n    >\r\n      {type === \"spinner\" && <LoadingSpinner size={size} />}\r\n      {type === \"circular\" && <LoadingCircular size={size} />}\r\n      {children && <View className={prefixClassname(\"loading__text\")} children={children} />}\r\n    </View>\r\n  )\r\n}\r\n","import \"../../styles/style\"\r\nimport \"../index.scss\"\r\n","import { ITouchEvent } from \"@tarojs/components\"\r\nimport { createContext } from \"react\"\r\nimport { ButtonProps } from \"./button\"\r\n\r\ninterface ButtonContextValue {\r\n  onClick?(event: ITouchEvent, props: ButtonProps): void\r\n}\r\n\r\nconst ButtonContext = createContext<ButtonContextValue>({})\r\n\r\nexport default ButtonContext\r\n","import * as _ from \"lodash\"\r\nimport { Children as ReactChildren, ReactNode } from \"react\"\r\nimport { isObjectElement } from \"./validate\"\r\n\r\nfunction isObjectChildren(children?: ReactNode) {\r\n  if (!_.isArray(children)) {\r\n    return false\r\n  }\r\n  const node = _.first(children)\r\n  return isObjectElement(node)\r\n}\r\n\r\nfunction forEachChildren<C>(children: C | C[], fn: (child: C, index: number) => void) {\r\n  const objectified = isObjectChildren(children)\r\n  const forEach = objectified ? _.forEach : ReactChildren.forEach\r\n  return forEach(children, fn)\r\n}\r\n\r\nfunction mapChildren<T, C>(\r\n  children: C | C[],\r\n  fn: (child: C, index: number) => T,\r\n): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>> {\r\n  const objectified = isObjectChildren(children)\r\n  const map = objectified ? _.map : ReactChildren.map\r\n  return map(children, fn)\r\n}\r\n\r\nconst Children = {\r\n  toArray: ReactChildren.toArray,\r\n  forEach: forEachChildren,\r\n  map: mapChildren,\r\n}\r\n\r\nexport default Children\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { PropsWithChildren } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\ninterface ButtonContentProps extends PropsWithChildren<ViewProps> {}\r\n\r\nfunction ButtonContent(props: ButtonContentProps) {\r\n  const { className, ...restProps } = props\r\n  return (\r\n    <View className={classNames(prefixClassname(\"button__content\"), className)} {...restProps} />\r\n  )\r\n}\r\n\r\nexport default ButtonContent\r\n","import { cloneIconElement, isIconElement } from \"@taroify/icons/utils\"\r\nimport { ButtonProps as TaroButtonProps, View } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport * as _ from \"lodash\"\r\nimport * as React from \"react\"\r\nimport { cloneElement, ReactElement, ReactNode, useContext, useMemo } from \"react\"\r\nimport ButtonBase from \"../button-base\"\r\nimport Loading, { LoadingProps } from \"../loading\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport Children from \"../utils/children\"\r\nimport { isElementOf, isObjectElement } from \"../utils/validate\"\r\nimport ButtonContent from \"./button-content\"\r\nimport ButtonContext from \"./button.context\"\r\nimport {\r\n  ButtonColor,\r\n  ButtonFormType,\r\n  ButtonShape,\r\n  ButtonSize,\r\n  ButtonVariant,\r\n} from \"./button.shared\"\r\n\r\nfunction useButtonLoading(loading?: boolean | LoadingProps | ReactElement): ReactNode {\r\n  return useMemo(() => {\r\n    if (_.isBoolean(loading) && loading) {\r\n      return (\r\n        <Loading\r\n          className={classNames(\r\n            prefixClassname(\"button__loading\"),\r\n            prefixClassname(\"button__loading--right\"),\r\n          )}\r\n        />\r\n      )\r\n    }\r\n\r\n    if (isObjectElement(loading)) {\r\n      const { className, ...restProps } = loading as LoadingProps\r\n      return (\r\n        <Loading\r\n          className={classNames(\r\n            prefixClassname(\"button__loading\"),\r\n            prefixClassname(\"button__loading--right\"),\r\n            className,\r\n          )}\r\n          {...restProps}\r\n        />\r\n      )\r\n    }\r\n\r\n    if (isElementOf(loading, Loading)) {\r\n      return cloneElement(loading as ReactElement, {\r\n        className: classNames(\r\n          prefixClassname(\"button__loading\"),\r\n          prefixClassname(\"button__loading--right\"),\r\n        ),\r\n      })\r\n    }\r\n\r\n    return loading\r\n  }, [loading])\r\n}\r\n\r\nfunction appendButtonIconClassname(icon?: ReactNode, className?: string) {\r\n  return isIconElement(icon) ? cloneIconElement(icon, { className }) : icon\r\n}\r\n\r\ninterface UseButtonChildrenOptions {\r\n  children?: ReactNode\r\n  loading?: ReactNode\r\n  icon?: ReactNode\r\n}\r\n\r\nfunction useButtonChildren(options: UseButtonChildrenOptions = {}) {\r\n  const { loading, icon: iconProp, children } = options\r\n  if (isElementOf(children, ButtonContent)) {\r\n    return children\r\n  }\r\n  const childrenArray = Children.toArray(children)\r\n  const lastIndex = _.size(childrenArray) - 1\r\n\r\n  const icon = appendButtonIconClassname(iconProp, prefixClassname(\"button__icon--right\"))\r\n  return (\r\n    <ButtonContent>\r\n      {loading || icon}\r\n      {\r\n        //\r\n        _.map(childrenArray, (child, index) => {\r\n          if (isIconElement(child) && index === 0) {\r\n            return appendButtonIconClassname(child, prefixClassname(\"button__icon--right\"))\r\n          }\r\n          if (isIconElement(child) && index === lastIndex) {\r\n            return appendButtonIconClassname(child, prefixClassname(\"button__icon--left\"))\r\n          }\r\n          return child\r\n        })\r\n      }\r\n    </ButtonContent>\r\n  )\r\n}\r\n\r\nexport interface ButtonProps\r\n  extends Omit<TaroButtonProps, \"size\" | \"formType\" | \"type\" | \"loading\" | \"plain\"> {\r\n  variant?: ButtonVariant\r\n  shape?: ButtonShape\r\n  size?: ButtonSize\r\n  color?: ButtonColor\r\n  formType?: ButtonFormType\r\n  loading?: boolean | LoadingProps | ReactElement\r\n  block?: boolean\r\n  hairline?: boolean\r\n  disabled?: boolean\r\n  icon?: ReactNode\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function Button(props: ButtonProps) {\r\n  const {\r\n    className,\r\n    style,\r\n    variant = \"contained\",\r\n    shape,\r\n    size = \"medium\",\r\n    color = \"default\",\r\n    formType = \"button\",\r\n    block,\r\n    hairline,\r\n    disabled,\r\n    loading: loadingProp,\r\n    icon,\r\n    children: childrenProp,\r\n    onClick,\r\n    ...restProps\r\n  } = props\r\n\r\n  const loading = useButtonLoading(loadingProp)\r\n  const children = useButtonChildren({ children: childrenProp, loading, icon })\r\n\r\n  const { onClick: onCtxClick } = useContext(ButtonContext)\r\n\r\n  return (\r\n    <View\r\n      className={classNames(\r\n        prefixClassname(\"button\"),\r\n        {\r\n          // Set variant style\r\n          [prefixClassname(\"button--text\")]: variant === \"text\",\r\n          [prefixClassname(\"button--contained\")]: variant === \"contained\",\r\n          [prefixClassname(\"button--outlined\")]: variant === \"outlined\",\r\n          // Set color style\r\n          [prefixClassname(`button--${color}`)]: color,\r\n          // Set shape style\r\n          [prefixClassname(\"button--round\")]: shape === \"round\",\r\n          [prefixClassname(\"button--square\")]: shape === \"square\",\r\n          // Set size style\r\n          [prefixClassname(\"button--mini\")]: size === \"mini\",\r\n          [prefixClassname(\"button--small\")]: size === \"small\",\r\n          [prefixClassname(\"button--medium\")]: size === \"medium\",\r\n          [prefixClassname(\"button--large\")]: size === \"large\",\r\n          // Set hairline style\r\n          [prefixClassname(\"button--hairline\")]: hairline,\r\n          [prefixClassname(\"hairline--surround\")]: hairline,\r\n          [prefixClassname(\"button--disabled\")]: disabled,\r\n          [prefixClassname(\"button--loading\")]: loading,\r\n          [prefixClassname(\"button--block\")]: block,\r\n        },\r\n        className,\r\n      )}\r\n      style={style}\r\n      onClick={(e) => {\r\n        if (!disabled && !loading) {\r\n          onClick?.(e)\r\n          onCtxClick?.(e, props)\r\n        }\r\n      }}\r\n    >\r\n      {children}\r\n      <ButtonBase\r\n        className={prefixClassname(\"button__button\")}\r\n        formType={formType === \"submit\" ? \"submit\" : formType === \"reset\" ? \"reset\" : undefined}\r\n        disabled={disabled || !!loading}\r\n        loading={false}\r\n        {...restProps}\r\n      />\r\n    </View>\r\n  )\r\n}\r\n\r\nexport function createButton(children: ReactNode | ButtonProps, props?: ButtonProps) {\r\n  if (_.isPlainObject(children)) {\r\n    return <Button {...(children as ButtonProps)} {...props} />\r\n  }\r\n  return <Button children={children} {...props} />\r\n}\r\n","import { FunctionComponent } from \"react\"\r\nimport ButtonComponent, { ButtonProps } from \"./button\"\r\nimport ButtonContent from \"./button-content\"\r\n\r\nexport * from \"./button.shared\"\r\nexport { createButton } from \"./button\"\r\nexport type { ButtonProps } from \"./button\"\r\nexport { default as ButtonContext } from \"./button.context\"\r\n\r\ninterface ButtonInterface extends FunctionComponent<ButtonProps> {\r\n  Content: typeof ButtonContent\r\n}\r\n\r\nconst Button = ButtonComponent as ButtonInterface\r\n\r\nButton.Content = ButtonContent\r\n\r\nexport default Button\r\n","import \"../../styles/style\"\r\nimport \"../../loading/style\"\r\nimport \"../../button-base/style\"\r\n\r\nimport \"../index.scss\"\r\n","import { Button, ButtonProps } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\nexport interface ButtonBaseProps extends ButtonProps {}\r\n\r\nfunction ButtonBase(props: ButtonBaseProps) {\r\n  const { className, ...restProps } = props\r\n  return <Button className={classNames(prefixClassname(\"button-base\"), className)} {...restProps} />\r\n}\r\n\r\nexport default ButtonBase\r\n","import \"../index.scss\"\r\n"],"sourceRoot":""}