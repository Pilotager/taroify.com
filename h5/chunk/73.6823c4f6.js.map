{"version":3,"sources":["webpack:///../../../../packages/icons/src/utils/index.ts","webpack:///../../../../packages/core/src/utils/validate/index.ts","webpack:///./src/components/block.tsx","webpack:///../../../../packages/core/src/utils/logger.ts","webpack:///../../../../packages/core/src/image/image-placeholder.tsx","webpack:///../../../../packages/core/src/image/image.tsx","webpack:///../../../../packages/core/src/badge/style/index.ts","webpack:///../../../../packages/core/src/badge/badge-wrapper.context.ts","webpack:///../../../../packages/core/src/badge/badge-wrapper.tsx","webpack:///../../../../packages/core/src/badge/badge.tsx","webpack:///../../../../packages/core/src/badge/create-badge-wrapper.tsx","webpack:///../../../../packages/core/src/badge/use-badge.tsx","webpack:///../../../../packages/core/src/badge/create-badge.tsx","webpack:///../../../../packages/core/src/badge/use-badge-wrapper.tsx","webpack:///../../../../packages/core/src/badge/index.ts","webpack:///../../../../packages/core/src/avatar/avatar.tsx","webpack:///../../../../packages/core/src/avatar/index.ts","webpack:///../../../../packages/core/src/avatar/avatar-group.tsx","webpack:///./src/pages/display/avatar/index.tsx"],"names":["isValidElement","element","isIconElement","cloneElement","node","className","oldProps","props","newProps","classNames","displayName","Block","variant","title","children","demoPrefixClassname","logConfig","warn","infoLevel","optionalParams","console","prefix","prefixClassname","React","getLogger","mode","shape","lazyLoad","placeholder","fallback","taroMode","useImageMode","useMemo","useImageShape","shapeProp","useState","useEffect","setLoading","failed","src","loading","imgProps","alt","onLoad","onError","setFailed","createContext","BadgeWrapper","BadgeWrapperContext","value","Badge","content","fixed","position","inWrapper","useContext","hasChildren","noChildren","fixedProp","contentProp","badge","dot","badgeProps","isElementOf","wrapper","createBadgeWrapper","acquireCloneElement","Avatar","size","limit","Number","spacing","useAvatars","avatars","Children","child","avatarsSize","luckyAvatars","length","Math","index","key","style","zIndex","total","randomAvatar","MAX_VALUE","AvatarDemo","background","Group"],"mappings":"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","file":"chunk/73.6823c4f6.js","sourcesContent":["import classNames from \"classnames\"\nimport * as _ from \"lodash\"\nimport { cloneElement, isValidElement, ReactElement, ReactNode } from \"react\"\nimport { ICON_TYPE, IconProps } from \"../shared\"\n\nexport function isIconElement(node?: ReactNode): boolean {\n  // Is`t not ReactElement\n  if (!isValidElement(node)) {\n    return false\n  }\n  const element = node as ReactElement\n  return _.hasIn(element.type, ICON_TYPE)\n}\n\nexport function cloneIconElement(node: ReactNode, props: IconProps): ReactNode {\n  if (!isIconElement(node)) {\n    return isValidElement(node) ? cloneElement(node, props) : node\n  }\n  const { className, ...restProps } = props\n  const element = node as ReactElement\n  const { props: oldProps } = element\n  const newProps: IconProps = {\n    ...oldProps,\n    className: classNames(oldProps.className, className),\n    ...restProps,\n  }\n  return cloneElement(element, newProps)\n}\n","import * as _ from \"lodash\"\r\nimport { isValidElement, JSXElementConstructor, ReactElement, ReactNode } from \"react\"\r\n\r\nexport function isNoneElement(node: ReactNode) {\r\n  return _.isUndefined(node) || _.isNull(node)\r\n}\r\n\r\nexport function isTextElement(node: ReactNode) {\r\n  return _.isNumber(node) || _.isString(node)\r\n}\r\n\r\nexport function isObjectElement(node?: ReactNode) {\r\n  return !isValidElement(node) && _.isObject(node) && !_.isArray(node)\r\n}\r\n\r\nexport function isElementOf(node?: ReactNode, type?: JSXElementConstructor<any>) {\r\n  if (isValidElement(node)) {\r\n    const element = node as ReactElement\r\n    if (element.type === type) {\r\n      return true\r\n    }\r\n\r\n    const displayName = _.get(element.type, \"displayName\")\r\n    if (\r\n      _.isFunction(element.type) &&\r\n      !_.isEmpty(displayName) &&\r\n      _.endsWith(displayName, _.get(type, \"displayName\"))\r\n    ) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n","import { View } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { demoPrefixClassname } from \"../styles/prefix\"\r\nimport \"./block.scss\"\r\n\r\ntype BlockVariant = \"card\"\r\n\r\ninterface BlockProps {\r\n  className?: string\r\n  variant?: BlockVariant\r\n  title?: ReactNode\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function Block(props: BlockProps) {\r\n  const { className, variant, title, children } = props\r\n  return (\r\n    <View className={classNames(demoPrefixClassname(\"block\"), className)}>\r\n      {title && <View className={demoPrefixClassname(\"block__title\")} children={title} />}\r\n      <View\r\n        className={classNames({\r\n          [demoPrefixClassname(\"block__content\")]: variant !== \"card\",\r\n          [demoPrefixClassname(\"block__card\")]: variant === \"card\",\r\n        })}\r\n      >\r\n        {children}\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n","// type LogLevel = \"debug\" | \"info\" | \"warn\" | \"error\"\r\n\r\n// export function configure(level: LogLevel) {\r\n//   if (level === \"debug\") {\r\n//     logLevel = debugLevel\r\n//   }\r\n// }\r\n\r\nconst debugLevel = 1\r\nconst infoLevel = debugLevel << 2\r\nconst warnLevel = infoLevel << 2\r\n\r\nconst logConfig = {\r\n  level: debugLevel,\r\n}\r\n\r\nexport function getLogger(name: string) {\r\n  return {\r\n    warn(message?: any, ...optionalParams: any[]) {\r\n      if (logConfig.level <= warnLevel) {\r\n        // eslint-disable-next-line no-console\r\n        console.warn(`Taroify - ${name} : ${message}`, ...optionalParams)\r\n      }\r\n    },\r\n  }\r\n}\r\n","import { View } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport * as _ from \"lodash\"\r\nimport * as React from \"react\"\r\nimport { cloneElement, isValidElement, ReactElement, ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\ninterface ImagePlaceholderProps {\r\n  prefix: string\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function ImagePlaceholder(props: ImagePlaceholderProps): JSX.Element {\r\n  const { prefix = \"placeholder\", children } = props\r\n  // Icon Element\r\n  if (isValidElement(children)) {\r\n    return cloneElement(children as ReactElement, {\r\n      className: classNames(\r\n        prefixClassname(`image__${prefix}`),\r\n        prefixClassname(`image__${prefix}-icon`),\r\n      ),\r\n    })\r\n  }\r\n  // Text String\r\n  if (_.isString(children) || _.isNumber(children)) {\r\n    return <View className={prefixClassname(`image__${prefix}`)} children={children} />\r\n  }\r\n  return <></>\r\n}\r\n","import { Image as TaroImage, View } from \"@tarojs/components\"\r\nimport { StandardProps } from \"@tarojs/components/types/common\"\r\nimport classNames from \"classnames\"\r\nimport * as _ from \"lodash\"\r\nimport * as React from \"react\"\r\nimport { ReactNode, useEffect, useMemo, useState } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport { getLogger } from \"../utils/logger\"\r\nimport ImagePlaceholder from \"./image-placeholder\"\r\nimport { ImageMode, ImageShape } from \"./image.shared\"\r\n\r\nconst { warn } = getLogger(\"Image\")\r\n\r\nfunction useImageMode(mode: ImageMode) {\r\n  return useMemo(() => {\r\n    if (mode === \"topLeft\") {\r\n      return \"top left\"\r\n    }\r\n    if (mode === \"topRight\") {\r\n      return \"top right\"\r\n    }\r\n    if (mode === \"bottomLeft\") {\r\n      return \"bottom left\"\r\n    }\r\n    if (mode === \"bottomRight\") {\r\n      return \"bottom right\"\r\n    }\r\n    return mode\r\n  }, [mode])\r\n}\r\n\r\nfunction useImageShape(shape?: ImageShape, round?: boolean) {\r\n  if (_.isBoolean(round) && round) {\r\n    shape = \"circle\"\r\n    warn(`Use the shape=\"${shape}\" prop instead of the round prop`)\r\n    if (round) {\r\n      return shape\r\n    }\r\n  }\r\n  return shape\r\n}\r\n\r\nexport interface ImageProps extends StandardProps {\r\n  src?: string\r\n  alt?: string\r\n  mode?: ImageMode\r\n  round?: boolean\r\n  shape?: ImageShape\r\n  lazyLoad?: boolean\r\n  placeholder?: boolean | ReactNode\r\n  fallback?: boolean | ReactNode\r\n}\r\n\r\nexport default function Image(props: ImageProps) {\r\n  const {\r\n    className,\r\n    src,\r\n    alt,\r\n    mode = \"scaleToFill\",\r\n    round,\r\n    shape: shapeProp,\r\n    lazyLoad = false,\r\n    placeholder = true,\r\n    fallback = true,\r\n    ...restProps\r\n  } = props\r\n  const taroMode = useImageMode(mode)\r\n  const shape = useImageShape(shapeProp, round)\r\n  const [loading, setLoading] = useState(false)\r\n  const [failed, setFailed] = useState(false)\r\n\r\n  useEffect(() => setLoading(true), [src])\r\n\r\n  function handleError() {\r\n    setLoading(false)\r\n    setFailed(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!failed && src && (\r\n        <TaroImage\r\n          src={src as string}\r\n          mode={(taroMode as unknown) as undefined}\r\n          lazyLoad={lazyLoad}\r\n          className={classNames(\r\n            prefixClassname(\"image\"),\r\n            {\r\n              [prefixClassname(\"image--square\")]: shape === \"square\",\r\n              [prefixClassname(\"image--rounded\")]: shape === \"rounded\",\r\n              [prefixClassname(\"image--circle\")]: shape === \"circle\",\r\n              [prefixClassname(\"image--loading\")]: loading,\r\n            },\r\n            className,\r\n          )}\r\n          imgProps={{ alt }}\r\n          onLoad={() => setLoading(false)}\r\n          onError={handleError}\r\n          {...restProps}\r\n        />\r\n      )}\r\n      {loading && placeholder && (\r\n        <View\r\n          className={classNames(\r\n            prefixClassname(\"image\"),\r\n            {\r\n              [prefixClassname(\"image--square\")]: shape === \"square\",\r\n              [prefixClassname(\"image--rounded\")]: shape === \"rounded\",\r\n              [prefixClassname(\"image--circle\")]: shape === \"circle\",\r\n            },\r\n            className,\r\n          )}\r\n          {...restProps}\r\n        >\r\n          <ImagePlaceholder prefix=\"placeholder\" children={placeholder} />\r\n        </View>\r\n      )}\r\n      {failed && fallback && (\r\n        <View\r\n          className={classNames(\r\n            prefixClassname(\"image\"),\r\n            {\r\n              [prefixClassname(\"image--square\")]: shape === \"square\",\r\n              [prefixClassname(\"image--rounded\")]: shape === \"rounded\",\r\n              [prefixClassname(\"image--circle\")]: shape === \"circle\",\r\n            },\r\n            className,\r\n          )}\r\n          {...restProps}\r\n        >\r\n          <ImagePlaceholder prefix=\"fallback\" children={fallback} />\r\n        </View>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import \"../../styles/style\"\r\nimport \"../index.scss\"\r\n","import { createContext } from \"react\"\r\n\r\ninterface BadgeWrapperContextValue {}\r\n\r\nconst BadgeWrapperContext = createContext<BadgeWrapperContextValue | undefined>(undefined)\r\n\r\nexport default BadgeWrapperContext\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { CSSProperties, ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport BadgeWrapperContext from \"./badge-wrapper.context\"\r\n\r\nexport interface BadgeWrapperProps extends ViewProps {\r\n  style?: CSSProperties\r\n  children?: ReactNode\r\n}\r\n\r\nfunction BadgeWrapper(props: BadgeWrapperProps) {\r\n  const { className, ...restProps } = props\r\n\r\n  return (\r\n    <BadgeWrapperContext.Provider value={{}}>\r\n      <View className={classNames(prefixClassname(\"badge-wrapper\"), className)} {...restProps} />\r\n    </BadgeWrapperContext.Provider>\r\n  )\r\n}\r\n\r\nexport default BadgeWrapper\r\n","import { View } from \"@tarojs/components\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as _ from \"lodash\"\r\nimport * as React from \"react\"\r\nimport { CSSProperties, ReactNode, useContext, useMemo } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport BadgeWrapper from \"./badge-wrapper\"\r\nimport BadgeWrapperContext from \"./badge-wrapper.context\"\r\n\r\nexport type BadgePosition = \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"\r\n\r\nexport interface BadgeProps extends ViewProps {\r\n  className?: string\r\n  style?: CSSProperties\r\n  content?: ReactNode\r\n  fixed?: boolean\r\n  dot?: boolean\r\n  max?: number\r\n  position?: BadgePosition\r\n  children?: ReactNode\r\n}\r\n\r\nfunction Badge(props: BadgeProps): JSX.Element {\r\n  const {\r\n    className,\r\n    content: contentProp,\r\n    max,\r\n    dot,\r\n    fixed: fixedProp,\r\n    position = \"top-right\",\r\n    children,\r\n    ...restProps\r\n  } = props\r\n  const inWrapper = useContext(BadgeWrapperContext)\r\n  const hasChildren = children !== undefined\r\n  const noChildren = children === undefined\r\n  const fixed = fixedProp ?? !!inWrapper\r\n\r\n  const content = useMemo(\r\n    () =>\r\n      _.isNumber(contentProp)\r\n        ? _.toString(_.gt(contentProp, max) ? `${max}+` : contentProp)\r\n        : contentProp,\r\n    [contentProp, max],\r\n  )\r\n\r\n  const badge = (\r\n    <View\r\n      className={classNames(\r\n        prefixClassname(\"badge__badge\"),\r\n        {\r\n          [prefixClassname(\"badge--dot\")]: dot,\r\n          [prefixClassname(\"badge--content\")]: content,\r\n          [prefixClassname(\"badge--fixed\")]: fixed || hasChildren,\r\n          [prefixClassname(\"badge--top-left\")]: position === \"top-left\",\r\n          [prefixClassname(\"badge--top-right\")]: position === \"top-right\",\r\n          [prefixClassname(\"badge--bottom-left\")]: position === \"bottom-left\",\r\n          [prefixClassname(\"badge--bottom-right\")]: position === \"bottom-right\",\r\n        },\r\n        className,\r\n      )}\r\n      children={!dot && content}\r\n      {...restProps}\r\n    />\r\n  )\r\n\r\n  if (noChildren) {\r\n    return badge\r\n  }\r\n\r\n  return (\r\n    <BadgeWrapper>\r\n      {children}\r\n      {(dot || content) && badge}\r\n    </BadgeWrapper>\r\n  )\r\n}\r\n\r\nexport default Badge\r\n","import { IconProps } from \"@taroify/icons/shared\"\r\nimport { cloneIconElement, isIconElement } from \"@taroify/icons/utils\"\r\nimport { StandardProps } from \"@tarojs/components/types/common\"\r\nimport { ViewProps } from \"@tarojs/components/types/View\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { cloneElement, isValidElement, PropsWithChildren, ReactElement, ReactNode } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\nimport BadgeWrapperContext from \"./badge-wrapper.context\"\r\n\r\nfunction acquireCloneElement(wrapper: ReactNode) {\r\n  if (isIconElement(wrapper)) {\r\n    return cloneIconElement\r\n  }\r\n  if (isValidElement(wrapper)) {\r\n    return cloneElement\r\n  }\r\n}\r\n\r\nconst createBadgeWrapper =\r\n  <P extends StandardProps = PropsWithChildren<ViewProps>>(wrapper: ReactNode) =>\r\n  (props: P): JSX.Element => {\r\n    const { className, ...restProps } = props\r\n    const cloneElement = acquireCloneElement(wrapper)\r\n\r\n    if (cloneElement) {\r\n      wrapper = cloneElement(\r\n        wrapper as ReactElement,\r\n        {\r\n          className: classNames(prefixClassname(\"badge-wrapper\"), className),\r\n          ...restProps,\r\n        } as IconProps,\r\n      )\r\n    }\r\n\r\n    return <BadgeWrapperContext.Provider value={{}} children={wrapper} />\r\n  }\r\n\r\nexport default createBadgeWrapper\r\n","import { default as useBadge } from \"./create-badge\"\r\n\r\nexport default useBadge\r\n","import * as _ from \"lodash\"\r\nimport * as React from \"react\"\r\nimport { cloneElement, ReactElement, ReactNode } from \"react\"\r\nimport { isElementOf } from \"../utils/validate\"\r\nimport Badge, { BadgeProps } from \"./badge\"\r\n\r\nexport default function createBadge(badge: ReactNode, props: BadgeProps = {}) {\r\n  if (_.isBoolean(badge) && badge) {\r\n    return (badgeProps: BadgeProps) => <Badge {...props} dot {...badgeProps} />\r\n  }\r\n\r\n  if (_.isNumber(badge) || _.isString(badge)) {\r\n    return (badgeProps: BadgeProps) => <Badge {...props} content={badge} {...badgeProps} />\r\n  }\r\n\r\n  if (isElementOf(badge, Badge)) {\r\n    return (badgeProps: BadgeProps) =>\r\n      cloneElement(badge as ReactElement, {\r\n        ...props,\r\n        ...badgeProps,\r\n      })\r\n  }\r\n  return (badgeProps: BadgeProps) => <Badge {...props} {...badgeProps} />\r\n}\r\n","import { default as useBadgeWrapper } from \"./create-badge-wrapper\"\r\n\r\nexport default useBadgeWrapper\r\n","import { FunctionComponent } from \"react\"\r\nimport BadgeComponent, { BadgeProps } from \"./badge\"\r\nimport BadgeWrapper from \"./badge-wrapper\"\r\n\r\nexport { default as createBadge } from \"./create-badge\"\r\nexport { default as createBadgeWrapper } from \"./create-badge-wrapper\"\r\n\r\nexport { default as useBadge } from \"./use-badge\"\r\nexport { default as useBadgeWrapper } from \"./use-badge-wrapper\"\r\n\r\ninterface BadgeInterface extends FunctionComponent<BadgeProps> {\r\n  Wrapper: typeof BadgeWrapper\r\n}\r\n\r\nconst Badge = BadgeComponent as BadgeInterface\r\n\r\nBadge.Wrapper = BadgeWrapper\r\n\r\nexport default Badge\r\n","import { View } from \"@tarojs/components\"\nimport { ViewProps } from \"@tarojs/components/types/View\"\nimport classNames from \"classnames\"\nimport * as React from \"react\"\nimport { CSSProperties, ReactNode } from \"react\"\nimport Image from \"../image\"\nimport { prefixClassname } from \"../styles\"\nimport { AvatarShape, AvatarSize } from \"./avatar.shared\"\n\nexport interface AvatarProps extends ViewProps {\n  className?: string\n  style?: CSSProperties\n  src?: string\n  alt?: string\n  shape?: AvatarShape\n  size?: AvatarSize\n  children?: ReactNode\n}\n\nfunction Avatar(props: AvatarProps) {\n  const { className, src, alt, shape = \"circle\", size = \"medium\", children, ...restProps } = props\n  return (\n    <View\n      className={classNames(\n        prefixClassname(\"avatar\"),\n        {\n          [prefixClassname(\"avatar--circle\")]: shape === \"circle\",\n          [prefixClassname(\"avatar--square\")]: shape === \"square\",\n          [prefixClassname(\"avatar--rounded\")]: shape === \"rounded\",\n        },\n        {\n          [prefixClassname(\"avatar--mini\")]: size === \"mini\",\n          [prefixClassname(\"avatar--small\")]: size === \"small\",\n          [prefixClassname(\"avatar--medium\")]: size === \"medium\",\n          [prefixClassname(\"avatar--large\")]: size === \"large\",\n        },\n        className,\n      )}\n      {...restProps}\n    >\n      {src ? <Image alt={alt} shape={shape} src={src} /> : children}\n    </View>\n  )\n}\n\nexport default Avatar\n","import { FunctionComponent } from \"react\"\r\nimport AvatarComponent, { AvatarProps } from \"./avatar\"\r\nimport AvatarGroup from \"./avatar-group\"\r\n\r\ninterface AvatarInterface extends FunctionComponent<AvatarProps> {\r\n  Group: typeof AvatarGroup\r\n}\r\n\r\nconst Avatar = AvatarComponent as AvatarInterface\r\nAvatar.Group = AvatarGroup\r\n\r\nexport default Avatar\r\n","import { View } from \"@tarojs/components\"\nimport classNames from \"classnames\"\nimport * as _ from \"lodash\"\nimport * as React from \"react\"\nimport {\n  Children,\n  cloneElement,\n  isValidElement,\n  ReactChild,\n  ReactElement,\n  ReactNode,\n  useMemo,\n} from \"react\"\nimport { prefixClassname } from \"../styles\"\nimport { isElementOf } from \"../utils/validate\"\nimport Avatar, { AvatarProps } from \"./avatar\"\nimport { AvatarShape, AvatarSpacing } from \"./avatar.shared\"\n\nconst useAvatars = (\n  children: ReactNode,\n  shape: AvatarShape,\n  limit: number,\n): [ReactNode[], number] => {\n  return useMemo(() => {\n    const avatars = Children.toArray(children) //\n      .filter((child) => isValidElement(child) && isElementOf(child, Avatar))\n\n    const avatarsSize = _.size(avatars)\n    const luckyAvatars: ReactNode[] = []\n    const length = Math.min(avatarsSize, limit)\n    for (let index = 0; index < length; index++) {\n      const child = _.get(avatars, index) as ReactChild\n      const element = child as ReactElement<AvatarProps>\n      const { key, props } = element\n      const { style, children, ...restProps } = props\n      luckyAvatars.push(\n        cloneElement(\n          element,\n          {\n            key: key ?? index,\n            shape,\n            style: {\n              ...style,\n              zIndex: index,\n            },\n            ...restProps,\n          },\n          children,\n        ),\n      )\n    }\n    return [luckyAvatars, avatarsSize]\n  }, [children, limit, shape])\n}\n\ninterface AvatarGroupProps {\n  children: ReactNode[]\n  shape?: AvatarShape\n  spacing?: AvatarSpacing\n  limit?: number\n  total?: number\n  className?: string\n}\n\nexport default function AvatarGroup(props: AvatarGroupProps) {\n  const {\n    className,\n    shape = \"circle\",\n    limit = Number.MAX_VALUE,\n    spacing = \"small\",\n    total,\n    children, //\n  } = props\n  const [avatars, avatarsSize] = useAvatars(children, shape, limit)\n\n  return (\n    <View\n      className={classNames(\n        prefixClassname(\"avatar-group\"),\n        {\n          [prefixClassname(\"avatar-group--spacing-mini\")]: spacing === \"mini\",\n          [prefixClassname(\"avatar-group--spacing-small\")]: spacing === \"small\",\n          [prefixClassname(\"avatar-group--spacing-medium\")]: spacing === \"medium\",\n          [prefixClassname(\"avatar-group--spacing-large\")]: spacing === \"large\",\n        },\n        className,\n      )}\n    >\n      {avatars}\n      {avatarsSize >= limit && (\n        <Avatar shape={shape} style={{ zIndex: avatarsSize }}>\n          +{total ? total - limit : avatarsSize - limit}\n        </Avatar>\n      )}\n    </View>\n  )\n}\n","import { Avatar, Badge } from \"@taroify/core\"\r\nimport { Cross, LocationOutlined, SettingOutlined } from \"@taroify/icons\"\r\nimport * as _ from \"lodash\"\r\nimport * as React from \"react\"\r\nimport Block from \"../../../components/block\"\r\nimport Page from \"../../../components/page\"\r\nimport \"./index.scss\"\r\n\r\nfunction randomAvatar() {\r\n  return `https://joeschmoe.io/api/v1/random?t=${_.random(Number.MAX_VALUE)}`\r\n}\r\n\r\nexport default function AvatarDemo() {\r\n  return (\r\n    <Page title=\"Avatar 头像\" className=\"avatar-demo\">\r\n      <Block title=\"基础用法\" className=\"avatar-block\">\r\n        <Avatar>P</Avatar>\r\n        <Avatar style={{ background: \"green\" }}>N</Avatar>\r\n        <Avatar style={{ background: \"pink\" }}>HP</Avatar>\r\n      </Block>\r\n      <Block title=\"尺寸\" className=\"avatar-block\">\r\n        <Avatar src={randomAvatar()} size=\"mini\" />\r\n        <Avatar src={randomAvatar()} size=\"small\" />\r\n        <Avatar src={randomAvatar()} size=\"medium\" />\r\n        <Avatar src={randomAvatar()} size=\"large\" />\r\n      </Block>\r\n      <Block title=\"形状\" className=\"avatar-block\">\r\n        <Avatar src={randomAvatar()} />\r\n        <Avatar src={randomAvatar()} shape=\"square\" />\r\n        <Avatar src={randomAvatar()} shape=\"rounded\" />\r\n      </Block>\r\n      <Block title=\"群组\" className=\"avatar-block\">\r\n        <Avatar.Group limit={5}>\r\n          <Avatar src={randomAvatar()} />\r\n          <Avatar src={randomAvatar()} />\r\n          <Avatar src={randomAvatar()} />\r\n          <Avatar src={randomAvatar()} />\r\n          <Avatar src={randomAvatar()} />\r\n          <Avatar src={randomAvatar()} />\r\n        </Avatar.Group>\r\n      </Block>\r\n      <Block title=\"最大\" className=\"avatar-block\">\r\n        <Avatar.Group limit={3}>\r\n          <Avatar src={randomAvatar()} />\r\n          <Avatar src={randomAvatar()} />\r\n          <Avatar src={randomAvatar()} />\r\n          <Avatar src={randomAvatar()} />\r\n          <Avatar src={randomAvatar()} />\r\n          <Avatar src={randomAvatar()} />\r\n        </Avatar.Group>\r\n      </Block>\r\n      <Block title=\"图标\" className=\"avatar-block\">\r\n        <Avatar style={{ background: \"red\" }}>\r\n          <Cross />\r\n        </Avatar>\r\n        <Avatar style={{ background: \"pink\" }}>\r\n          <LocationOutlined />\r\n        </Avatar>\r\n        <Avatar style={{ background: \"green\" }}>\r\n          <SettingOutlined />\r\n        </Avatar>\r\n      </Block>\r\n      <Block title=\"徽章用法\" className=\"avatar-block\">\r\n        <Badge className=\"avatar-dot\" dot position=\"bottom-right\">\r\n          <Avatar src={randomAvatar()} />\r\n        </Badge>\r\n        <Badge\r\n          className=\"avatar-avatar\"\r\n          content={<Avatar src={randomAvatar()} />}\r\n          position=\"bottom-right\"\r\n        >\r\n          <Avatar src={randomAvatar()} />\r\n        </Badge>\r\n      </Block>\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}