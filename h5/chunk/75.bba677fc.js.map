{"version":3,"sources":["webpack:///../../../../packages/icons/src/utils/index.ts","webpack:///./src/components/block.tsx","webpack:///../../../../packages/core/src/badge/style/index.ts","webpack:///../../../../packages/core/src/badge/badge.tsx","webpack:///../../../../packages/core/src/badge/use-badge.tsx","webpack:///./src/pages/display/badge/index.tsx"],"names":["isValidElement","element","isIconElement","cloneElement","node","className","oldProps","props","newProps","classNames","Block","variant","title","children","demoPrefixClassname","Badge","content","position","isIcon","useMemo","hasChildren","noneChildren","contentProp","cloneIconElement","React","prefixClassname","dot","elementTypeOf","badge","BadgeDemo","max"],"mappings":"u6CAKM,0BAEJ,IAAKA,yBAAL,GACE,SAEF,IAAMC,EAAN,EACA,OAAO,IAAQA,EAAR,KAAP,KAGI,+BACJ,IAAKC,cAAL,GACE,OAAO,4BAAuBC,uBAAaC,EAApC,GAAP,EAEI,IAAEC,EAAR,EAAQA,UAAR,gCACMJ,EAAN,EACeK,EAAf,EAAQC,MACFC,EAAQ,sCAEZH,YAAWI,IAAWH,EAAD,cAFvB,GAKA,OAAOH,uBAAaF,EAApB,K,mJCVa,SAASS,MAAMH,GAAmB,MACvCF,EAAwCE,EAAxCF,UAAWM,EAA6BJ,EAA7BI,QAASC,EAAoBL,EAApBK,MAAOC,EAAaN,EAAbM,SACnC,OACE,eAAC,IAAD,CAAMR,YAAWI,IAAWK,YAAoB,SAAUT,GAA1D,YACGO,GAAS,cAAC,IAAD,CAAMP,YAAWS,YAAoB,gBAAiBD,WAAUD,IAC1E,cAAC,IAAD,CACEP,YAAWI,KAAU,mBAClBK,YAAoB,kBAAgC,SAAZH,GADtB,cAElBG,YAAoB,eAA6B,SAAZH,GAFnB,IADvB,WAMGE,S,2DC3BT,e,qOCwEA,MArDA,SAASE,MAAMR,GAAiB,QACxB,EAAN,EAAM,YAAN,EAAmBS,QAAb,EAAN,EAAM,MAAN,EAAM,IAAN,IAAmDC,gBAAnD,MAAM,YAAN,EAA2EJ,EAA3E,EAA2EA,SACrEK,EAASC,mBAAQ,kBAAMjB,YAAP,KAAgC,CAAtD,IACMkB,OAAN,IAAoBP,EACdQ,OAAN,IAAqBR,EAEfG,EAAUG,mBACd,kBACE,OACI,IAAW,0BADf,GAFmB,IAKrB,CAACG,EALH,IAQA,OAAOC,YAAiBL,EAASL,EAAWW,oBAArB,MAA+B,CACpDnB,YAAWI,KAAU,mBAEhBgB,YAAD,kBADF,GADmB,cAGhBA,YAAD,SAFF,GADmB,cAIhBA,YAAD,cAAiCJ,GAHnC,GADmB,cAKhBI,YAAD,mBAAsCJ,GAJxC,aAIwDJ,GALrC,cAMhBQ,YAAD,oBAAuCJ,GALzC,cAKyDJ,GANtC,cAOhBQ,YAAD,sBAAyCJ,GAN3C,gBAM2DJ,GAPxC,cAQhBQ,YAAD,uBAA0CJ,GAA6B,iBAAbJ,GARzC,GAD+B,GAapDJ,WACE,iCACIK,GADJ,EAEGG,OAFH,EAGGD,IAAgBM,GAAhBN,IACC,oBAAK,CACHf,YAAWI,IACTgB,YADmB,6BAGhBA,YAAD,cADF,GAFmB,cAIhBA,YAAD,kBAFF,GAFmB,cAKhBA,YAAD,mBAHF,aAGwCR,GALrB,cAMhBQ,YAAD,oBAJF,cAIyCR,GANtB,cAOhBQ,YAAD,sBALF,gBAK2CR,GAPxB,cAQhBQ,YAAD,uBAAuD,iBAAbR,GARzB,GAUnBQ,YAXC,iBAaHZ,YAAWa,GAAOV,Q,6xBCvD9B,SAASW,cAAcvB,EAAvB,GACE,OAAO,6BAAyBA,SAAhC,EAGY,qBAA2D,IAAtBG,EAAsB,uDAAF,GACrE,OAAI,QAAJ,EACS,gBAAGM,EAAH,EAAGA,SAAH,OAAiC,kBAAM,mBAAU,CAAEa,OAAF,EAAMb,WAAUA,MAGtE,QAAqB,IAAzB,GACS,gBAAGA,EAAH,EAAGA,SAAH,OAAiC,kBAAM,mBAAU,CAAEG,UAAF,EAAkBH,WAAUA,MAGlFc,cAAcC,EAAlB,GACS,gBAAGf,EAAH,EAAGA,SAAH,OACLV,uBAAayB,EAAD,sCAEVf,iBAGC,gBAAGA,EAAH,EAAGA,SAAH,OAAiC,kBAAM,mBAAU,CAAEA,WAAUA,Q,4NCrBvD,SAASgB,YACtB,OACE,eAAC,IAAD,CAAMjB,QAAM,WAAWP,YAAU,aAAjC,YACE,eAAC,IAAD,CAAOO,QAAM,OAAb,YACE,mBAAOI,UAAS,EAAhB,WACE,cAAC,IAAD,CAAMX,YAAU,kBAElB,mBAAOW,UAAQ,KAAf,WACE,cAAC,IAAD,CAAMX,YAAU,kBAElB,mBAAOW,UAAQ,MAAf,WACE,cAAC,IAAD,CAAMX,YAAU,kBAElB,mBAAOqB,OAAG,EAAV,WACE,cAAC,IAAD,CAAMrB,YAAU,qBAGpB,eAAC,IAAD,CAAOO,QAAM,MAAb,YACE,mBAAOI,UAAS,GAAIc,MAAK,EAAzB,WACE,cAAC,IAAD,CAAMzB,YAAU,kBAElB,mBAAOW,UAAS,GAAIc,MAAK,GAAzB,WACE,cAAC,IAAD,CAAMzB,YAAU,kBAElB,mBAAOW,UAAS,IAAKc,MAAK,GAA1B,WACE,cAAC,IAAD,CAAMzB,YAAU,qBAGpB,eAAC,IAAD,CAAOO,QAAM,QAAb,YACE,mBAAOP,YAAU,eAAeW,UAAS,EAAzC,WACE,cAAC,IAAD,CAAMX,YAAU,kBAElB,mBAAOA,YAAU,eAAeW,UAAS,GAAzC,WACE,cAAC,IAAD,CAAMX,YAAU,kBAElB,mBAAOA,YAAU,eAAeW,UAAQ,MAAxC,WACE,cAAC,IAAD,CAAMX,YAAU,kBAElB,mBAAOA,YAAU,eAAeqB,OAAG,EAAnC,WACE,cAAC,IAAD,CAAMrB,YAAU,qBAGpB,eAAC,IAAD,CAAOO,QAAM,UAAb,YACE,mBAAOI,UAAS,cAAC,UAAD,CAASX,YAAU,eAAnC,WACE,cAAC,IAAD,CAAMA,YAAU,kBAElB,mBAAOW,UAAS,cAAC,QAAD,CAAOX,YAAU,eAAjC,WACE,cAAC,IAAD,CAAMA,YAAU,kBAElB,mBAAOW,UAAS,cAAC,OAAD,CAAMX,YAAU,eAAhC,WACE,cAAC,IAAD,CAAMA,YAAU,qBAGpB,eAAC,IAAD,CAAOO,QAAM,UAAb,YACE,mBAAOI,UAAS,GAAIC,WAAS,WAA7B,WACE,cAAC,IAAD,CAAMZ,YAAU,kBAElB,mBAAOW,UAAS,GAAIC,WAAS,YAA7B,WACE,cAAC,IAAD,CAAMZ,YAAU,kBAElB,mBAAOW,UAAS,GAAIC,WAAS,cAA7B,WACE,cAAC,IAAD,CAAMZ,YAAU,kBAElB,mBAAOW,UAAS,GAAIC,WAAS,eAA7B,WACE,cAAC,IAAD,CAAMZ,YAAU,qBAGpB,eAAC,IAAD,CAAOO,QAAM,OAAOP,YAAU,qBAA9B,YACE,mBAAOW,UAAQ,OACf,mBAAOA,UAAS,IAAKc,MAAK","file":"chunk/75.bba677fc.js","sourcesContent":["import classNames from \"classnames\"\nimport * as _ from \"lodash\"\nimport { cloneElement, isValidElement, ReactElement, ReactNode } from \"react\"\nimport { ICON_TYPE, IconProps } from \"../shared\"\n\nexport function isIconElement(node?: ReactNode): boolean {\n  // Is`t not ReactElement\n  if (!isValidElement(node)) {\n    return false\n  }\n  const element = node as ReactElement\n  return _.hasIn(element.type, ICON_TYPE)\n}\n\nexport function cloneIconElement(node: ReactNode, props: IconProps): ReactNode {\n  if (!isIconElement(node)) {\n    return isValidElement(node) ? cloneElement(node, props) : node\n  }\n  const { className, ...restProps } = props\n  const element = node as ReactElement\n  const { props: oldProps } = element\n  const newProps: IconProps = {\n    ...oldProps,\n    className: classNames(oldProps.className, className),\n    ...restProps,\n  }\n  return cloneElement(element, newProps)\n}\n","import { View } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport * as React from \"react\"\r\nimport { ReactNode } from \"react\"\r\nimport { demoPrefixClassname } from \"../styles/prefix\"\r\nimport \"./block.scss\"\r\n\r\ntype BlockVariant = \"card\"\r\n\r\ninterface BlockProps {\r\n  className?: string\r\n  variant?: BlockVariant\r\n  title?: ReactNode\r\n  children?: ReactNode\r\n}\r\n\r\nexport default function Block(props: BlockProps) {\r\n  const { className, variant, title, children } = props\r\n  return (\r\n    <View className={classNames(demoPrefixClassname(\"block\"), className)}>\r\n      {title && <View className={demoPrefixClassname(\"block__title\")} children={title} />}\r\n      <View\r\n        className={classNames({\r\n          [demoPrefixClassname(\"block__content\")]: variant !== \"card\",\r\n          [demoPrefixClassname(\"block__card\")]: variant === \"card\",\r\n        })}\r\n      >\r\n        {children}\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n","import \"../../styles/style\"\r\nimport \"../index.scss\"\r\n","import { cloneIconElement, isIconElement } from \"@taroify/icons/utils\"\r\nimport { View } from \"@tarojs/components\"\r\nimport classNames from \"classnames\"\r\nimport * as _ from \"lodash\"\r\nimport * as React from \"react\"\r\nimport { ReactElement, ReactNode, useMemo } from \"react\"\r\nimport { prefixClassname } from \"../styles\"\r\n\r\nexport type BadgePosition = \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"\r\n\r\nexport interface BadgeProps {\r\n  className?: string\r\n  content?: ReactNode\r\n  dot?: boolean\r\n  max?: number\r\n  position?: BadgePosition\r\n  children?: ReactNode\r\n}\r\n\r\nfunction Badge(props: BadgeProps): JSX.Element {\r\n  const { className, content: contentProp, max, dot, position = \"top-right\", children } = props\r\n  const isIcon = useMemo(() => isIconElement(children), [children])\r\n  const hasChildren = children !== undefined\r\n  const noneChildren = children === undefined\r\n\r\n  const content = useMemo(\r\n    () =>\r\n      _.isNumber(contentProp)\r\n        ? _.toString(_.gt(contentProp, max) ? `${max}+` : contentProp)\r\n        : contentProp,\r\n    [contentProp, max],\r\n  )\r\n\r\n  return cloneIconElement(isIcon ? children : <View />, {\r\n    className: classNames(\r\n      {\r\n        [prefixClassname(\"badge__wrapper\")]: hasChildren,\r\n        [prefixClassname(\"badge\")]: noneChildren,\r\n        [prefixClassname(\"badge--dot\")]: noneChildren && dot,\r\n        [prefixClassname(\"badge--top-left\")]: noneChildren && position === \"top-left\",\r\n        [prefixClassname(\"badge--top-right\")]: noneChildren && position === \"top-right\",\r\n        [prefixClassname(\"badge--bottom-left\")]: noneChildren && position === \"bottom-left\",\r\n        [prefixClassname(\"badge--bottom-right\")]: noneChildren && position === \"bottom-right\",\r\n      },\r\n      className,\r\n    ),\r\n    children: (\r\n      <>\r\n        {!isIcon && children}\r\n        {noneChildren && !dot && content}\r\n        {hasChildren && (dot || content) && (\r\n          <View\r\n            className={classNames(\r\n              prefixClassname(\"badge\"),\r\n              {\r\n                [prefixClassname(\"badge--dot\")]: dot,\r\n                [prefixClassname(\"badge--content\")]: content,\r\n                [prefixClassname(\"badge--top-left\")]: position === \"top-left\",\r\n                [prefixClassname(\"badge--top-right\")]: position === \"top-right\",\r\n                [prefixClassname(\"badge--bottom-left\")]: position === \"bottom-left\",\r\n                [prefixClassname(\"badge--bottom-right\")]: position === \"bottom-right\",\r\n              },\r\n              prefixClassname(\"badge--fixed\"),\r\n            )}\r\n            children={!dot && content}\r\n          />\r\n        )}\r\n      </>\r\n    ),\r\n  }) as ReactElement\r\n}\r\n\r\nexport default Badge\r\n","import * as _ from \"lodash\"\r\nimport * as React from \"react\"\r\nimport { cloneElement, isValidElement, ReactElement, ReactNode } from \"react\"\r\nimport Badge, { BadgeProps } from \"./badge\"\r\n\r\ninterface BadgeChildren {\r\n  children?: ReactNode\r\n}\r\n\r\nfunction elementTypeOf(node: ReactNode, type: any) {\r\n  return isValidElement(node) && (node as ReactElement).type === type\r\n}\r\n\r\nexport default function useBadge(badge: ReactNode, props: BadgeProps = {}) {\r\n  if (_.isBoolean(badge) && badge) {\r\n    return ({ children }: BadgeChildren) => <Badge {...props} dot children={children} />\r\n  }\r\n\r\n  if (_.isNumber(badge) || _.isString(badge)) {\r\n    return ({ children }: BadgeChildren) => <Badge {...props} content={badge} children={children} />\r\n  }\r\n\r\n  if (elementTypeOf(badge, Badge)) {\r\n    return ({ children }: BadgeChildren) =>\r\n      cloneElement(badge as ReactElement, {\r\n        ...props,\r\n        children,\r\n      })\r\n  }\r\n  return ({ children }: BadgeChildren) => <Badge {...props} children={children} />\r\n}\r\n","import { Badge } from \"@taroify/core\"\r\nimport { Cross, Down, Success } from \"@taroify/icons\"\r\nimport { View } from \"@tarojs/components\"\r\nimport * as React from \"react\"\r\nimport Block from \"../../../components/block\"\r\nimport Page from \"../../../components/page\"\r\nimport \"./index.scss\"\r\n\r\nexport default function BadgeDemo() {\r\n  return (\r\n    <Page title=\"Badge 徽标\" className=\"badge-demo\">\r\n      <Block title=\"基础用法\">\r\n        <Badge content={5}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content=\"10\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content=\"Hot\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge dot>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n      </Block>\r\n      <Block title=\"最大值\">\r\n        <Badge content={10} max={9}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={21} max={20}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={100} max={99}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n      </Block>\r\n      <Block title=\"自定义颜色\">\r\n        <Badge className=\"custom-color\" content={5}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge className=\"custom-color\" content={10}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge className=\"custom-color\" content=\"Hot\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge className=\"custom-color\" dot>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n      </Block>\r\n      <Block title=\"自定义徽标内容\">\r\n        <Badge content={<Success className=\"badge-icon\" />}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={<Cross className=\"badge-icon\" />}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={<Down className=\"badge-icon\" />}>\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n      </Block>\r\n      <Block title=\"自定义徽标位置\">\r\n        <Badge content={10} position=\"top-left\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={10} position=\"top-right\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={10} position=\"bottom-left\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n        <Badge content={10} position=\"bottom-right\">\r\n          <View className=\"badge-block\" />\r\n        </Badge>\r\n      </Block>\r\n      <Block title=\"独立展示\" className=\"independent-badges\">\r\n        <Badge content=\"20\" />\r\n        <Badge content={100} max={99} />\r\n      </Block>\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}